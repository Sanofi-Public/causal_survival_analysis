{
  "hash": "85a3570757cf8b433d1855fdc12ef098",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle:  \"Causal survival analysis\"\nsubtitle:  \"Treatment Effect Estimation in Causal Survival Analysis: Practical Recommendations\"\nauthor:  \n  - name:  Charlotte Voinot\n    corresponding:  true\n    email:  charlotte.voinot@sanofi.com\n    url:  https://chvoinot.github.io/\n    affiliations:  \n      - name:  Sanofi R&D\n        department:  CMEI\n        url:  https://www.sanofi.fr/fr/\n      - name:  INRIA\n        department:  Premedical\n        url:  https://www.inria.fr/fr/premedical\n      - name:  INSERM\n        url:  https://www.inserm.fr/\n      - name:  Université de Montpellier\n        url:  https://www.umontpellier.fr/\n  - name: Clément Berenfeld\n    corresponding: true \n    email: clement.berenfeld@uni-potsdam.de\n    url: https://cberenfeld.github.io\n    affiliations: \n      - name: Universität Potsdam, Potsdam, Germany\n        departement: Institut für Mathematik\n        url: https://www.uni-potsdam.de/en/university-of-potsdam\n  - name: Imke Mayer\n    corresponding: true \n    email: imke.mayer@owkin.com, now affiliated with Owkin\n    affiliations: \n      - name: Charité -- Universität Berlin, Berlin, Germany\n        departement: Institut für Public Health\n        url: https://www.charite.de/\n  - name:  Bernard Sebastien\n    corresponding:  true\n    email:  bernard.sebastien@sanofi.com\n    affiliations:  \n      - name:  Sanofi R&D\n        department:  CMEI\n        url:  https://www.sanofi.fr/fr/\n  - name:  Julie Josse\n    corresponding:  true\n    email:  julie.josse@inria.fr\n    url:  https://juliejosse.com/\n    affiliations:  \n      - name:  INRIA\n        department:  Premedical\n        url:  https://www.inria.fr/fr/premedical\n      - name:  INSERM\n        url:  https://www.inserm.fr/\n      - name:  Université de Montpellier\n        url:  https://www.umontpellier.fr/\n \ndate:  last-modified\ndate-modified:  last-modified\ngithub-user:  chvoinot\nrepo:  \"Simple_simulation_causal_survival\"\nformat:\n  html:\n    self-contained: true\n    code-fold: true\n  pdf: default\nproject: false\neditor:  \n  markdown:  \n    wrap:  7\n\n---\n\n\n\n\n\n# Estimators \n\n\n**Unadjusted Kaplan-Meier** \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"utilitary.R\")\n# Kaplan-Meier estimator handmade implementation\n# The database 'data' must be in the same form as that shown in \n# notation (Table 1) and with the same variable names (status, T_obs) \nKaplan_meier_handmade <- function(data, \n                                  status = data$status, \n                                  T_obs = data$T_obs) {\n  # Sort unique observed times\n  Y.grid <- sort(unique(T_obs))\n  \n  # Initialize vectors for number of events, number at risk, and survival \n  # probability\n  d <- rep(NA, length(Y.grid))  # Number of events at time Y.grid[i]\n  n <- rep(NA, length(Y.grid))  # Number at risk just before time Y.grid[i]\n  S <- rep(NA, length(Y.grid))  # Survival probability at time Y.grid[i]\n  \n  # Loop over each unique observed time\n  for (i in 1:length(Y.grid)) {\n    d[i] <- sum(T_obs == Y.grid[i] & status == 1, na.rm = TRUE)  # Count events\n    n[i] <- sum(T_obs >= Y.grid[i])  # Count at risk\n    \n    # Calculate survival probability\n    S[i] <- cumprod(1 - d / n)[i]\n  }\n  \n  # Create a dataframe with the results\n  df <- data.frame(d = d, n = n, S = S, T = Y.grid)\n  \n  return(df)\n}\n\n\n# Function to calculate RMST (Restricted Mean Survival Time):\n# Two possibilities for computing RMST: \n# - in using directly S_A1 and S_A0 (survival function of treated and control)\n# - in using the dataframe and the function computes the survival functions\nRMST_1 <- function(data = NULL, A1 = 1, A0 = 0, tau, S_A1 = NULL, S_A0 = NULL) {\n  if (is.null(S_A1) & is.null(S_A0)) {\n    # Subset data for treatment groups\n    data1 <- data[data$A == A1,]\n    data0 <- data[data$A == A0,]\n    \n    # Calculate Kaplan-Meier survival estimates\n    S_A1 <- Kaplan_meier_handmade(data1, status = data1$status, \n                                  T_obs = data1$T_obs)\n    S_A0 <- Kaplan_meier_handmade(data0, status = data0$status, \n                                  T_obs = data0$T_obs)\n    \n    # Restrict observations to those less than or equal to tau\n    Y.grid1 <- data1$T_obs[data1$T_obs <= tau]\n    Y.grid0 <- data0$T_obs[data0$T_obs <= tau]\n  } else {\n    # Restrict observations to those less than or equal to tau\n    Y.grid1 <- S_A1$T[S_A1$T <= tau]\n    Y.grid0 <- S_A0$T[S_A0$T <= tau]\n  }\n  \n  # Filter survival estimates to restricted observations\n  S_A1 <- S_A1 %>%\n    dplyr::filter(T %in% Y.grid1)\n  S_A0 <- S_A0 %>%\n    dplyr::filter(T %in% Y.grid0)\n  \n  # Check if there is any event at tau for S_A1\n  if (!any(S_A1$T == tau)) {\n    new_row <- tibble(T = tau, S = S_A1$S[nrow(S_A1)])\n    S_A1 <- dplyr::bind_rows(S_A1, new_row)\n  }\n  \n  # Check if there is any event at tau for S_A0\n  if (!any(S_A0$T == tau)) {\n    new_row <- tibble(T = tau, S = S_A0$S[nrow(S_A0)])\n    S_A0 <- dplyr::bind_rows(S_A0, new_row)\n  }\n\n  # Calculate integrals from 0 to tau of survival probabilities\n  intA1 <- integral_rectangles(S_A1$T, S_A1$S)\n  intA0 <- integral_rectangles(S_A0$T, S_A0$S)\n  RMST1 <- intA1 - intA0\n  \n  return(list(RMST=RMST1, intA1=intA1,intA0=intA0))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Alternative code to estimate Kaplan-Meier estimator with survival package\n# instead of handmade KM\nRMST_alternative <- function(data, A1 = 1, A0 = 0, tau){\n  # Estimate Kaplan-Meier estimator with survfit function on data subset\n   # Groupe A = 0\n  fit0 <- survfit(Surv(T_obs, status) ~ 1, data = data[data$A == A0,]) \n  # Groupe A = 1\n  fit1 <- survfit(Surv(T_obs, status) ~ 1, data = data[data$A == A1,])  \n\n  # Estimate the RMST with rmean\n  summary_fit0 <- summary(fit0, rmean = tau)  # RMST for A = 0\n  summary_fit1 <- summary(fit1, rmean = tau)  # RMST for A = 1\n\n  # Extract the RMST from the summary objects\n  rmst0 <- summary_fit0$table[\"rmean\"][[1]]\n  rmst1 <- summary_fit1$table[\"rmean\"][[1]]\n\n  # Compute the difference of RMST between the two groups\n  difference_rmst <- rmst1 - rmst0\nreturn(difference_rmst)\n}\n```\n:::\n\n\n\n\n\n**IPCW Kaplan-Meier**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Kaplan-Meier adjusted\n# Times of event \n# Failures:  1 if event, 0 if censored\n# Variable:  1 if treated, 0 if control\n# Weights:  Weight of the individual\nadjusted.KM <- function(times, failures, variable, weights = NULL) {\n  # Sanity checks\n  if (sum(times < 0) > 0) {\n    stop(\"Error: times must be positive\")\n  }\n  if (!is.null(weights) && sum(weights < 0, na.rm = TRUE) > 0) {\n    stop(\"Error: weights must be superior to 0\")\n  }\n  if (sum(failures != 0 & failures != 1) > 0) {\n    stop(\"Error: failures must be a vector of 0 or 1\")\n  }\n  # If 'weights' is NULL, initialize 'w' with ones of the same length as 'times', \n  # otherwise use 'weights'\n  w <- if (is.null(weights)) rep(1, length(times)) else weights\n  \n  # Create a DataFrame 'data' with columns t (times), f (failures), \n  # v (stratification variable: often treatment variable), and w (weights)\n  data <- data.frame(t = times, f = failures, v = variable, w = w)\n  \n  # Remove rows from the DataFrame where the stratification variable is NA\n  data <- data[!is.na(data$v),]\n  \n  # Initialize an empty DataFrame to store the Kaplan-Meier results\n  table_KM <- data.frame(times = NULL, n.risk = NULL, n.event = NULL, \n                         survival = NULL, variable = NULL)\n  \n  # Loop over each unique value of the stratification variable\n  for (i in unique(variable)) {\n    # Subset the data for the current stratification variable value\n    d <- data[data$v == i,]\n    \n    # Create a sorted vector of unique event times, including time 0 and the \n    # maximum time\n    tj <- c(0, sort(unique(d$t[d$f == 1])), max(d$t))\n    \n    # Calculate the number of events at each time point\n    dj <- sapply(tj, function(x) {\n      sum(d$w[d$t == x & d$f == 1])\n    })\n    \n    # Calculate the number of individuals at risk at each time point\n    nj <- sapply(tj, function(x) {\n      sum(d$w[d$t >= x])\n    })\n    \n    # Compute the cumulative product for the survival probabilities\n    st <- cumprod((nj - dj) / nj)\n    \n    # Append the results to the Kaplan-Meier table\n    table_KM <- rbind(table_KM, data.frame(T = tj, n = nj, d = dj, \n                                           S = st, variable = i))\n  }\n  return(table_KM)\n}\n\n\n# IPCW Kaplan-Meier estimator with restricted tau\nIPCW_Kaplan_meier <- function(data, tau, \n                              X.names.censoring, \n                              nuisance_censoring = \"cox\", \n                              n.folds = NULL) {\n  \n  # Compute of truncated T_obs, status and censored status\n  data$T_obs_tau <- ifelse(data$T_obs >= tau, tau, data$T_obs)\n  data$censor.status_tau <- 1 - as.numeric((data$T_obs >= tau) | \n                                             (data$T_obs < tau & data$status == 1))\n  data$status_tau <- as.numeric((data$T_obs >= tau) | \n                                  (data$T_obs < tau & data$status == 1))\n  Y.grid <- sort(unique(data$T_obs_tau))\n  \n  # Estimate probability of remaining uncensored based on nuisance model \n  S_C_hat <- estimate_survival_function(data = data, X.names = X.names.censoring,\n                                        Y.grid = Y.grid, T_obs = \"T_obs_tau\",\n                                        status = \"censor.status_tau\",\n                                        type_of_model = nuisance_censoring,\n                                        n.folds = n.folds)\n  \n  # Select the probability of censoring for each observed T_obs_tau from the \n  # curve\n  data$S_C <- S_C_hat$S_hat[cbind(1:nrow(data), match(data$T_obs_tau, Y.grid))]\n  \n  # Compute IPC weights\n  data$weights <- data$status_tau / data$S_C\n  \n  # Compute the adjusted IPCW Kaplan-Meier\n  S <- adjusted.KM(times = data$T_obs, failures = data$status, \n                   variable = data$A, weights = data$weights)\n\n  # Compute differenceof RMST between the two groups\n  RMST <- RMST_1(S_A1 = S[S$variable == 1,], S_A0 = S[S$variable == 0,], tau = tau)\n  \n  return(list(RMST = RMST$RMST,\n              intA1 = RMST$intA1,\n              intA0 = RMST$intA0,\n              weights = data$weights))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Alternative code to estimate IPCW Kaplan-Meier, IPTW Kaplan-Meier or \n# IPTW-IPCW Kaplan-Meier estimator with survival package instead of using \n# handmade adjusted.KM function (the weights need to be calculated before).\n\n# Weights0 corresponds to weights of the control and weights1 of treated\nAdjusted_Kaplan_meier_alternative <- function(data, A1 = 1, A0 = 0, tau, \n                                          weights0, weights1){\n  # Estimate Kaplan-Meier estimator with survfit function on data subset \n  # Groupe A = 0\n  fit0 <- survfit(Surv(T_obs, status) ~ 1, data = data[data$A == A0,], weights = weights0)  \n  # Groupe A = 1\n  fit1 <- survfit(Surv(T_obs, status) ~ 1, data = data[data$A == A1,], weights = weights1)  \n\n  # Estimate the RMST with rmean\n  summary_fit0 <- summary(fit0, rmean = tau)  # RMST for A = 0\n  summary_fit1 <- summary(fit1, rmean = tau)  # RMST for A = 1\n\n  # Extract the RMST from the summary objects\n  rmst0 <- summary_fit0$table[\"rmean\"][[1]]\n  rmst1 <- summary_fit1$table[\"rmean\"][[1]]\n\n  # Compute the difference in RMST between the two groups\n  difference_rmst <- rmst1 - rmst0\nreturn(difference_rmst)\n}\n```\n:::\n\n\n\n\nThis alternative approach for IPCW Kaplan-Meier would also be valid for IPTW and IPTW-IPCW Kaplan-Meier.\n\n**Buckley-James based estimator **\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the Restricted Mean Survival Time (RMST) difference\nBJ <- function(data, tau, X.names.outcome = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n               nuisance = \"cox\", n.folds = NULL) {\n  # Truncate observed times at tau\n  data$T_obs_tau <- ifelse(data$T_obs >= tau, tau, data$T_obs)\n  Y.grid <- sort(unique(data$T_obs_tau))\n  \n  # Censoring status at tau\n  data$status_tau <- as.numeric((data$T_obs >= tau) | \n                                (data$T_obs < tau & data$status == 1))\n  \n  # Compute Q_t for all time points\n  Q_t <- Q_t_hat(data, tau, X.names.outcome, nuisance, n.folds)\n  data$Q_y <- Q_Y(data, tau, Q_t)\n  \n  # Split data by treatment group\n  data_treated <- data %>% dplyr::filter(A == 1)\n  data_not_treated <- data %>% dplyr::filter(A == 0)\n  \n  # Calculate Restricted Survival Time (RST) for each group\n  data_treated$RST <- data_treated$status_tau * data_treated$T_obs_tau + \n                      (1 - data_treated$status_tau) * data_treated$Q_y\n  \n  data_not_treated$RST <- data_not_treated$status_tau * data_not_treated$T_obs_tau + \n                          (1 - data_not_treated$status_tau) * data_not_treated$Q_y\n  \n  # Calculate RMST difference between treated and not treated\n  RMST <- mean(data_treated$RST) - mean(data_not_treated$RST)\n  \n  # Return RMST and other relevant metrics\n  return(list(\n    RMST = RMST, \n    ATE_treated = mean(data_treated$RST), \n    ATE_not_treated = mean(data_not_treated$RST)\n  ))\n}\n```\n:::\n\n\n\n\n**IPTW Kaplan-Meier**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to calculate IPTW Kaplan-Meier\nIPTW_Kaplan_meier <- function(data, tau, X.names.propensity, \n                              nuisance_propensity = \"glm\", n.folds = NULL) {\n  # Estimate propensity scores\n  data$e_hat <- estimate_propensity_score(\n    data,\n    treatment_covariates = X.names.propensity,\n    type_of_model = nuisance_propensity,\n    n.folds = n.folds)\n  \n  # Truncate observed times at tau\n  data$T_obs_tau <- pmin(data$T_obs, tau)\n  \n  # Define censoring status at tau\n  data$status_tau <- as.numeric((data$T_obs >= tau) | \n                                (data$T_obs < tau & data$status == 1))\n  \n  # Calculate weights\n  data$weights <- (data$A) * (1 / data$e_hat) + (1 - data$A) / (1 - data$e_hat)\n  \n  # Adjusted Kaplan-Meier estimator\n  S <- adjusted.KM(\n    times = data$T_obs, \n    failures = data$status,\n    variable = data$A, \n    weights = data$weights)\n  \n  # Calculate RMST from the adjusted survival curves\n  RMST <- RMST_1(S_A1 = S[S$variable == 1,], \n                 S_A0 = S[S$variable == 0,], \n                 tau = tau)\n  \n  return(list(\"intA0\" = RMST$intA0, \"intA1\" = RMST$intA1, \"RMST\" = RMST$RMST))\n}\n```\n:::\n\n\n\n\n**G-formula**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to estimate the g-formula Two-learner.\ng_formula_T_learner <- function(data, \n                                X.names.outcome, \n                                tau, \n                                nuisance_survival = \"cox\", \n                                n.folds = NULL) {\n  # Compute min(T_obs,tau)\n  data$T_obs_tau <- ifelse(data$T_obs >= tau, tau, data$T_obs)\n  \n  # Y.grid is the grid of time points where we want to estimate the \n  # survival function.\n  Y.grid <- sort(unique(data$T_obs_tau))\n  \n  S_hat <- estimate_survival_function(data, X.names.outcome, \n                                      Y.grid, \n                                      type_of_model = nuisance_survival,\n                                      T_obs = \"T_obs\", \n                                      status = \"status\", \n                                      n.folds = n.folds)\n  \n  # Compute the area under each survival curve up to max(Y.grid) = tau.\n  E_hat1 <- expected_survival(S_hat$S_hat1, Y.grid)\n  E_hat0 <- expected_survival(S_hat$S_hat0, Y.grid)\n  \n  # Calculate the mean difference.\n  theta_g_formula <- mean(E_hat1 - E_hat0)\n  \n  return(theta_g_formula)\n}\n\n# Function to estimate the g-formula Single-learner.\ng_formula_S_learner <- function(data, \n                                X.names.outcome, \n                                tau, \n                                nuisance_survival = \"cox\", \n                                n.folds = NULL) {\n  # Compute min(T_obs,tau)\n  data$T_obs_tau <- ifelse(data$T_obs >= tau, tau, data$T_obs)\n  \n  # Y.grid is the grid of time points where we want to estimate the \n  # survival function.\n  Y.grid <- sort(unique(data$T_obs_tau))\n  \n  S_hat <- estimate_survival_function(data, X.names.outcome, \n                                      Y.grid, \n                                      type_of_model = nuisance_survival,\n                                      learner = \"S-learner\",\n                                      T_obs = \"T_obs\", \n                                      status = \"status\", \n                                      n.folds = n.folds)\n  \n  # Compute the area under each survival curve until max(Y.grid) = tau.\n  E_hat1 <- expected_survival(S_hat$S_hat1, Y.grid)\n  E_hat0 <- expected_survival(S_hat$S_hat0, Y.grid)\n  \n  # Calculate the mean difference.\n  theta_g_formula <- mean(E_hat1 - E_hat0)\n  \n  return(theta_g_formula)\n}\n```\n:::\n\n\n\n\n**IPTW-IPCW Kaplan-Meier**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nIPTW_IPCW_Kaplan_meier <- function(data, \n                                   X.names.propensity, \n                                   X.names.censoring, \n                                   tau,\n                                   nuisance_propensity = \"glm\",\n                                   nuisance_censoring = \"cox\",\n                                   n.folds = NULL) {\n  # Censoring time to tau if observed time exceeds tau\n  data$T_obs_tau <- ifelse(data$T_obs >= tau, tau, data$T_obs)\n  \n  # Create censoring status for tau\n  data$censor.status_tau <- 1 - as.numeric((data$T_obs >= tau) | \n                                           (data$T_obs < tau & data$status == 1))\n  \n  # Create status at tau\n  data$status_tau <- as.numeric((data$T_obs >= tau) | \n                                (data$T_obs < tau & data$status == 1))\n  \n  # Grid of unique observed times truncated at tau\n  Y.grid <- sort(unique(data$T_obs_tau))\n\n  # Estimate propensity scores\n  data$e_hat <- estimate_propensity_score(data,\n                                          treatment_covariates = X.names.propensity,\n                                          type_of_model = nuisance_propensity,\n                                          n.folds = n.folds)\n\n  # Estimate survival function for censoring\n  S_C_hat <- estimate_survival_function(data, X.names = X.names.censoring,\n                                        Y.grid = Y.grid, T_obs = \"T_obs_tau\",\n                                        status = \"censor.status_tau\",\n                                        type_of_model = nuisance_censoring,\n                                        n.folds = n.folds)\n\n  # Get estimated survival probabilities for censoring\n  data$S_C <- S_C_hat$S_hat[cbind(1:nrow(data), match(data$T_obs_tau, Y.grid))]\n\n  # Calculate weights\n  data$weights <- data$status_tau / data$S_C * \n                  (data$A * (1 / data$e_hat) + \n                     (1 - data$A) * (1 / (1 - data$e_hat)))\n\n  # Compute adjusted Kaplan-Meier estimator\n  S <- adjusted.KM(times = data$T_obs, \n                   failures = data$status, \n                   variable = data$A, \n                   weights = data$weights)\n\n  # Compute Restricted Mean Survival Time (RMST)\n  RMST <- RMST_1(S_A1 = S[S$variable == 1, ], \n                 S_A0 = S[S$variable == 0, ],\n                 tau = tau)\n\n  # Return RMST and ATE for treated and not treated groups\n  return(list(RMST = RMST$RMST, ATE_treated = RMST$intA1, \n              ATE_not_treated = RMST$intA0))\n}\n```\n:::\n\n\n\n\n**IPTW-BJ estimator**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nIPTW_BJ <- function(data, \n                    X.names.propensity,\n                    X.names.outcome, \n                    tau,\n                    nuisance_propensity = \"glm\",\n                    nuisance = \"cox\",\n                    n.folds = NULL) {\n  # Minimum of T_obs and tau\n  data$T_obs_tau <- ifelse(data$T_obs >= tau, tau, data$T_obs)\n  \n  # Grid of unique observed times truncated at tau\n  Y.grid <- sort(unique(data$T_obs_tau))\n  \n  # Indicator for min(T, tau) < C\n  data$status_tau <- as.numeric((data$T_obs >= tau) | \n                                (data$T_obs < tau & data$status == 1))\n  \n\n  # Estimate propensity scores\n  data$e_hat <- estimate_propensity_score(data,\n                                          treatment_covariates = X.names.propensity,\n                                          type_of_model = nuisance_propensity,\n                                          n.folds = n.folds)\n\n\n  # Estimation of Q_s\n  Q_t <- Q_t_hat(data, tau, X.names.outcome, nuisance, n.folds)\n  data$Q_y <-  Q_Y(data,tau,Q_t)\n  \n  # BJ transformation\n  data$Y <-  data$status_tau * data$T_obs_tau + \n                             (1 - data$status_tau) * data$Q_y\n  \n  # IPTW on BJ transformation \n  data$RST <- data$Y * (data$A/data$e_hat-(1-data$A)/(1-data$e_hat))\n  \n  RMST <- mean(data$RST)\n  \n  # Return RMST\n  return(RMST)\n}\n```\n:::\n\n\n\n\n**AIPTW-AIPCW**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# DR censoring transformation\nAIPCW <-function(data,\n                 tau,\n                 X.names.censoring = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n                 X.names.outcome = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n                 nuisance_Qt = \"cox\",\n                 nuisance_censoring = \"cox\", \n                 n.folds = NULL, \n                 h_C_hat = NULL,\n                 method_aipw = 1) {\n  \n  # Truncate observed times at tau\n  data$T_obs_tau <- pmin(data$T_obs, tau)\n  \n  # Define status at tau\n  data$status_tau <-  as.numeric((data$T_obs > tau) | \n                                  (data$T_obs <= tau &  data$status == 1 ))  \n\n  data$censor.status_tau <- 1- as.numeric(\n    (data$T_obs > tau) | (data$T_obs <= tau &  data$status == 1 ))\n \n  Y.grid <- sort(unique(data$T_obs_tau))\n  \n  # Estimate survival function for censoring\n  S_C_hat <- estimate_survival_function(data = data,X.names.censoring,\n                                        type_of_model = nuisance_censoring,\n                                        n.folds = n.folds,\n                                        Y.grid = Y.grid,\n                                        T_obs = \"T_obs_tau\",\n                                        status = \"censor.status_tau\")\n  \n  Y.index <- findInterval(data$T_obs_tau, Y.grid)\n  \n  data$S_C_hat_T_obs_tau <- S_C_hat$S_hat[cbind(seq_along(Y.index), Y.index)]\n\n  \n  if (is.null(h_C_hat)) {\n      h_C_hat <- estimate_hazard_function(S_C_hat$S_hat,Y.grid)\n  } \n  \n  # Compute Q.t.hat\n  Q.t.hat <- Q_t_hat(data = data,\n                     X.names = X.names.outcome,\n                     tau = tau,\n                     nuisance = nuisance_Qt,\n                     n.folds = n.folds)\n  \n  # Compute Q.Y.hat\n  data$Q.Y.hat <- Q_Y(data = data, tau, Q.t.hat)\n\n  # Compute first term\n  data$first_term <- (data$T_obs_tau * data$status_tau) / \n    data$S_C_hat_T_obs_tau\n  \n  # Compute second term\n  data$second_term <- (data$Q.Y.hat * (1 - data$status_tau)) / \n    data$S_C_hat_T_obs_tau\n  \n  Y.diff <- diff(c(0, Y.grid))\n  \n  # Compute integrand for the third term\n  integrand <- sweep( ( (h_C_hat) / S_C_hat$S_hat )* (Q.t.hat), 2, Y.diff, \"*\")\n  \n  # Compute third term\n  data$third_term <- integrate(integrand, Y.grid, data$T_obs_tau)\n  \n  # Compute pseudo outcome\n  pseudo_outcome <- data$first_term + data$second_term - data$third_term\n\n  return(pseudo_outcome) \n}\n\n\nAIPTW_AIPCW <- function(data, \n                        tau, \n                        X.names.propensity = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n                        X.names.censoring = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n                        X.names.outcome = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n                        nuisance_propensity = \"glm\",\n                        nuisance_regression = \"cox\",\n                        nuisance_censoring = \"cox\",\n                        nuisance_Qt = \"cox\",\n                        n.folds = NULL) {\n  \n  # Estimate propensity scores\n  data$e_hat <- estimate_propensity_score(\n    data = data, \n    treatment_covariates = X.names.propensity, \n    type_of_model = nuisance_propensity, \n    n.folds = n.folds\n  )\n  \n  # Prepare data for censoring model\n  data$T_obs_tau <- ifelse(data$T_obs >= tau, tau, data$T_obs)\n  \n  data$censor.status_tau <- 1 - as.numeric((data$T_obs >= tau) | \n                                             (data$T_obs < tau & data$status == 1))\n  \n  data$status_tau <- as.numeric((data$T_obs >= tau) | \n                                  (data$T_obs < tau & data$status == 1))\n  \n  # Create unique time grid\n  Y.grid <- sort(unique(data$T_obs_tau))\n  \n  S_hat <- estimate_survival_function(data, X.names.outcome, \n                                      type_of_model = nuisance_regression, \n                                      Y.grid = Y.grid,\n                                      T_obs= \"T_obs\", \n                                      status = \"status\", \n                                      n.folds = n.folds)\n  \n  # Compute area under the survival curve up to tau\n  data$E_hat1 <- expected_survival(S_hat$S_hat1, Y.grid)\n  data$E_hat0 <- expected_survival(S_hat$S_hat0, Y.grid)\n  \n  # Compute IPW-weighted residuals\n  data$IPW_res <- data$E_hat1 * (1 - data$A / data$e_hat) - \n    data$E_hat0 * (1 - (1 - data$A) / (1 - data$e_hat))\n  \n  # Compute AIPCW weights\n  TDR <- AIPCW(\n    data = data, \n    tau = tau,\n    X.names.censoring = X.names.censoring,\n    X.names.outcome = X.names.outcome,\n    nuisance_Qt = nuisance_Qt, \n    nuisance_censoring = nuisance_censoring, \n    n.folds = n.folds\n  )\n  \n  data$TDR <- TDR\n  \n  # Compute AIPCW-weighted residuals\n  data$AIPCW_w <- data$TDR * (data$A / data$e_hat - \n                                (1 - data$A) / (1 - data$e_hat))\n  \n  # Compute regression residuals\n  data$reg <- data$E_hat1 - data$E_hat0\n  data$reg_res <- data$A / data$e_hat * (data$TDR - data$E_hat1) - \n    (1 - data$A) / (1 - data$e_hat) * (data$TDR - data$E_hat0)\n  \n  # Compute estimators\n  # na.rm = TRUE to remove NA for the mean calculation\n  AIPTW_AIPCW_IPW_res <- mean(data$AIPCW_w + data$IPW_res, na.rm = TRUE)\n  AIPTW_AIPCW_reg_res <- mean(data$reg + data$reg_res, na.rm = TRUE)\n  \n  return(list(AIPTW_AIPCW_reg_res = AIPTW_AIPCW_reg_res, \n              AIPTW_AIPCW_IPW_res = AIPTW_AIPCW_IPW_res))\n}\n```\n:::\n\n\n\n\n# Simulations\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n############ RCT \n# RCT1:  Random treatment assignment + independent censoring\n# RCT2:  Random treatment assignment + dependent censoring (conditional on X \n# and A)\nsimulate_data_RCT <- function(n, mu = c(1, 1, -1, 1), \n                              sigma = diag(4), \n                              colnames_cov = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n                              tau, \n                              coefT0 = 0.01,\n                              parsS = c(0.5, 0.5, -0.5, 0.5), \n                              coefC = 0.03,\n                              parsC = c(0.7, 0.3, -0.25, -0.1), \n                              parsC_A = c(-0.2), \n                              scenario = \"RCT2\",\n                              mis_specification=\"none\") {\n  \n  # Generate X from a multivariate normal distribution\n  X <- MASS::mvrnorm(n, mu, sigma)\n  X <- as.data.frame(X)\n  colnames(X) <- colnames_cov\n  \n  # Treatment variable selection: all X\n  X_treatment <- as.matrix(X)\n  \n  # Propensity score: constant for random assignment\n  e <- rep(0.5, n)\n  \n  # Random treatment assignment\n  A <- sapply(e, FUN = function(p) rbinom(1, 1, p))\n  \n  # Outcome variable selection: all X\n  X_outcome <- as.matrix(X)\n  \n  # Simulate the outcome using the cumulative hazard inversion method\n  epsilon <- runif(n, min = 1e-8, max = 1)\n  T0 <- -log(epsilon) / (coefT0 * exp(X_outcome %*% parsS))\n  \n  if (scenario == \"RCT1\") {\n    # Simulate independent censoring time\n    epsilon <- runif(n, min = 1e-8, max = 1)\n    C <- -log(epsilon) / coefC\n  }\n  else if (scenario == \"RCT2\") {\n    # Simulate dependent censoring time\n    X_censoring <- as.matrix(cbind(X,A))\n    parsC <- c(parsC,parsC_A)\n    \n    epsilon <- runif(n, min = 1e-8, max = 1)\n    C <- -log(epsilon) / (coefC * exp(rowSums(X_censoring %*% diag(parsC))))\n  }\n  # T(1) = T(0) + 10\n  T1 <- T0 + 10\n  \n  # True survival time\n  T_true <- A * T1 + (1 - A) * T0\n  \n  # Observed time\n  T_obs <- pmin(T_true, C)\n  \n  # Status indicator\n  status <- as.numeric(T_true <= C)\n  censor.status <- as.numeric(T_true > C)\n  \n  # Restricted survival time\n  T_obs_tau <- pmin(T_obs, tau)\n  status_tau <- as.numeric((T_obs > tau) | (T_obs <= tau & status == 1))\n  \n  # Combine all data into a single data frame\n  data_target_population <- data.frame(X, tau, A, T0, T1, C, T_obs, T_obs_tau, \n                                       status, censor.status, status_tau, e)\n  \n  return(data_target_population)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# data_rct1 simulate the data from RCT with independent censoring \ndata_rct1 <- simulate_data_RCT(n=2000,\n                               tau=25,\n                               scenario=\"RCT1\",\n                               coefC = 0.03)\n# Stratification by treatment \ngroup_0 <- data_rct1 %>%\n  dplyr:: filter(A == 0)%>%\n  dplyr:: select(X1,X2,X3,X4,C,T1,T0,status,T_tild=T_obs)\n\ngroup_1 <- data_rct1 %>%\n  dplyr:: filter(A == 1)%>%\n  dplyr:: select(X1,X2,X3,X4,C,T1,T0,status,T_tild=T_obs)\n\n# Summary statistics\nsummary_group_0 <- summary(group_0)\nsummary_group_1 <- summary(group_1)\n\nprint(paste(\"Descriptive statistics for group A=0:  \",nrow(group_0)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Descriptive statistics for group A=0:   980\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary_group_0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       X1                X2                X3                X4         \n Min.   :-2.4278   Min.   :-2.5440   Min.   :-3.7847   Min.   :-1.8984  \n 1st Qu.: 0.2367   1st Qu.: 0.2207   1st Qu.:-1.7397   1st Qu.: 0.3080  \n Median : 0.8874   Median : 0.9151   Median :-1.0772   Median : 0.9779  \n Mean   : 0.9304   Mean   : 0.9201   Mean   :-1.0556   Mean   : 0.9859  \n 3rd Qu.: 1.6079   3rd Qu.: 1.5791   3rd Qu.:-0.4198   3rd Qu.: 1.6549  \n Max.   : 4.3245   Max.   : 4.0995   Max.   : 1.8472   Max.   : 4.8312  \n       C                   T1               T0               status      \n Min.   :  0.06203   Min.   : 10.01   Min.   :  0.0068   Min.   :0.0000  \n 1st Qu.:  9.82051   1st Qu.: 12.65   1st Qu.:  2.6477   1st Qu.:0.0000  \n Median : 23.98867   Median : 18.83   Median :  8.8341   Median :1.0000  \n Mean   : 33.12936   Mean   : 31.81   Mean   : 21.8065   Mean   :0.6714  \n 3rd Qu.: 46.95866   3rd Qu.: 33.88   3rd Qu.: 23.8806   3rd Qu.:1.0000  \n Max.   :216.10537   Max.   :501.21   Max.   :491.2130   Max.   :1.0000  \n     T_tild         \n Min.   :  0.00684  \n 1st Qu.:  2.01180  \n Median :  6.09216  \n Mean   : 11.12417  \n 3rd Qu.: 14.61291  \n Max.   :183.48214  \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Descriptive statistics for group A=1:  \",nrow(group_1)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Descriptive statistics for group A=1:   1020\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary_group_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       X1                X2                X3                X4         \n Min.   :-3.0528   Min.   :-1.8016   Min.   :-4.4714   Min.   :-2.2543  \n 1st Qu.: 0.3698   1st Qu.: 0.3332   1st Qu.:-1.6206   1st Qu.: 0.3354  \n Median : 1.0458   Median : 1.0431   Median :-0.9810   Median : 1.0330  \n Mean   : 1.0058   Mean   : 1.0248   Mean   :-0.9689   Mean   : 1.0456  \n 3rd Qu.: 1.6565   3rd Qu.: 1.6583   3rd Qu.:-0.2678   3rd Qu.: 1.7469  \n Max.   : 3.9181   Max.   : 4.4224   Max.   : 2.2201   Max.   : 4.2466  \n       C                   T1               T0               status      \n Min.   :  0.06622   Min.   : 10.00   Min.   :  0.0006   Min.   :0.0000  \n 1st Qu.: 10.21281   1st Qu.: 12.85   1st Qu.:  2.8545   1st Qu.:0.0000  \n Median : 24.05030   Median : 18.63   Median :  8.6291   Median :1.0000  \n Mean   : 33.09947   Mean   : 34.75   Mean   : 24.7458   Mean   :0.5059  \n 3rd Qu.: 46.56232   3rd Qu.: 33.07   3rd Qu.: 23.0716   3rd Qu.:1.0000  \n Max.   :278.99450   Max.   :704.00   Max.   :694.0046   Max.   :1.0000  \n     T_tild         \n Min.   :  0.06622  \n 1st Qu.: 10.07121  \n Median : 12.99762  \n Mean   : 16.50671  \n 3rd Qu.: 20.04407  \n Max.   :105.65018  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# data_rct2 simulate the data from RCT with dependent censoring \ndata_rct2 <- simulate_data_RCT(n=2000,\n                               tau=25,\n                               scenario=\"RCT2\", \n                               coefC = 0.03, \n                               parsC = c(0.7,0.3,-0.25,-0.1),\n                               parsC_A = c(-0.2))\n\n\n# Stratification by treatment \ngroup_0 <- data_rct2 %>%\n  dplyr:: filter(A == 0)%>%\n  dplyr:: select(X1,X2,X3,X4,C,T1,T0,status,status_tau,T_tild=T_obs)\n\ngroup_1 <- data_rct2 %>%\n  dplyr:: filter(A == 1)%>%\n  dplyr:: select(X1,X2,X3,X4,C,T1,T0,status,status_tau,T_tild=T_obs)\n\n# Summary statistics\nsummary_group_0 <- summary(group_0)\nsummary_group_1 <- summary(group_1)\n\nprint(paste(\"Descriptive statistics for group A=0:  \",nrow(group_0)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Descriptive statistics for group A=0:   1007\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary_group_0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       X1                X2                X3                X4         \n Min.   :-1.6906   Min.   :-2.3742   Min.   :-4.2230   Min.   :-2.5886  \n 1st Qu.: 0.3617   1st Qu.: 0.3238   1st Qu.:-1.6553   1st Qu.: 0.3579  \n Median : 0.9650   Median : 1.0027   Median :-1.0304   Median : 1.0087  \n Mean   : 0.9764   Mean   : 1.0283   Mean   :-1.0395   Mean   : 1.0298  \n 3rd Qu.: 1.6504   3rd Qu.: 1.7111   3rd Qu.:-0.3947   3rd Qu.: 1.6901  \n Max.   : 4.8222   Max.   : 4.6609   Max.   : 2.1723   Max.   : 4.0877  \n       C                  T1               T0               status      \n Min.   :  0.0085   Min.   : 10.01   Min.   :  0.0112   Min.   :0.0000  \n 1st Qu.:  2.4758   1st Qu.: 12.94   1st Qu.:  2.9395   1st Qu.:0.0000  \n Median :  6.9609   Median : 19.00   Median :  9.0007   Median :0.0000  \n Mean   : 14.3249   Mean   : 31.36   Mean   : 21.3584   Mean   :0.4558  \n 3rd Qu.: 17.2217   3rd Qu.: 32.01   3rd Qu.: 22.0074   3rd Qu.:1.0000  \n Max.   :222.0613   Max.   :479.61   Max.   :469.6114   Max.   :1.0000  \n   status_tau         T_tild        \n Min.   :0.0000   Min.   :  0.0085  \n 1st Qu.:0.0000   1st Qu.:  1.3055  \n Median :0.0000   Median :  3.8413  \n Mean   :0.4955   Mean   :  8.0761  \n 3rd Qu.:1.0000   3rd Qu.:  9.0187  \n Max.   :1.0000   Max.   :217.4281  \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Descriptive statistics for group A=1:  \",nrow(group_1)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Descriptive statistics for group A=1:   993\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary_group_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       X1               X2                X3                X4         \n Min.   :-2.510   Min.   :-1.8086   Min.   :-4.2038   Min.   :-2.5923  \n 1st Qu.: 0.297   1st Qu.: 0.2558   1st Qu.:-1.6640   1st Qu.: 0.2749  \n Median : 1.004   Median : 0.9682   Median :-0.9730   Median : 0.9203  \n Mean   : 0.991   Mean   : 0.9506   Mean   :-0.9941   Mean   : 0.9452  \n 3rd Qu.: 1.687   3rd Qu.: 1.6436   3rd Qu.:-0.3097   3rd Qu.: 1.6352  \n Max.   : 4.205   Max.   : 4.9256   Max.   : 1.6479   Max.   : 4.5962  \n       C                  T1                T0                status      \n Min.   :  0.0232   Min.   :  10.00   Min.   :   0.0037   Min.   :0.0000  \n 1st Qu.:  3.0802   1st Qu.:  13.26   1st Qu.:   3.2614   1st Qu.:0.0000  \n Median :  9.0760   Median :  19.22   Median :   9.2223   Median :0.0000  \n Mean   : 19.2985   Mean   :  35.69   Mean   :  25.6941   Mean   :0.2195  \n 3rd Qu.: 20.6487   3rd Qu.:  35.54   3rd Qu.:  25.5430   3rd Qu.:0.0000  \n Max.   :651.8074   Max.   :1563.02   Max.   :1553.0164   Max.   :1.0000  \n   status_tau         T_tild         \n Min.   :0.0000   Min.   :  0.02322  \n 1st Qu.:0.0000   1st Qu.:  3.08020  \n Median :0.0000   Median :  9.07600  \n Mean   :0.2739   Mean   : 12.78643  \n 3rd Qu.:1.0000   3rd Qu.: 15.47799  \n Max.   :1.0000   Max.   :125.00572  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to calculate ground truth for RCT and Observational data\nground_truth <- function(tau, \n                         data) {\n  # Compute RMST with the true T1\n  data$T1_tau <- ifelse(data$T1 >= tau, tau, data$T1)\n  \n  # Compute RMST with the true T0\n  data$T0_tau <- ifelse(data$T0 >= tau, tau, data$T0)\n  \n  # Compute the difference in RMST if everyone had the treatment \n  # and if everyone had the control\n  truth <- mean(data$T1_tau) - mean(data$T0_tau)\n  \n  return(truth)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set initial tau value\ntau <- 25\n# Define vector of tau values\nvec_tau <- seq(1, 150, by = 1)\n\n# Function to plot the ground truth RMST for different scenarios\nplot_ground_truth <- function(data, vec_tau, tau, ylim, title_text) {\n  truth <- sapply(vec_tau, function(x) ground_truth(tau = x, data))\n  matplot(\n    vec_tau, truth, type = \"l\", lty = 1, col = 1,\n    ylab = \"RMST\", xlab = \"tau\", ylim = ylim\n  )\n  abline(v = tau, col = \"red\", lty = 2)\n  abline(h = truth[vec_tau == tau], col = \"red\", lty = 2)\n  title(title_text, cex.main = 0.9)  # Adjusting title text size\n}\n\n# Simulation for scenario RCT1\ndata_RCT1 <- simulate_data_RCT(\n  n = 100000, tau = tau, scenario = \"RCT1\")\n\nplot_ground_truth(data_RCT1, \n                  vec_tau, \n                  tau, \n                  c(0, 10), \n                  \"True difference in RMST for RCT scenario 1\")\n```\n\n::: {.cell-output-display}\n![](Notebook_causal_survival_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntruth_tau1 <- ground_truth(data_RCT1, tau = 25)\nprint(paste0(\"The ground truth for RCT scenario 1 and 2 at time 25 is \", round(truth_tau1, 1)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The ground truth for RCT scenario 1 and 2 at time 25 is 7.1\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntruth_tau2 <- truth_tau1\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to launch the previous implemented functions in a \n# specified scenario, sample size.\nall_estimates <- function(data, sample.size, tau, \n                           X.names.propensity,\n                           X.names.censoring,\n                           X.names.outcome,\n                           nuisance_propensity = \"glm\", \n                           nuisance_censoring = \"cox\", \n                           nuisance_survival = \"cox\", \n                           n.folds = NULL,\n                           estimator = \"all\") {\n  \n  # List of available estimators\n  available_estimators <- c(\n    \"Naive\", \"KM\", \"IPTW KM\", \"IPCW KM\", \"BJ\", \n    \"IPTW-IPCW KM\", \"IPTW-BJ\", \"G_formula (T-learners)\", \n    \"G_formula (S-learner)\", \"AIPTW-AIPCW\", \"SurvRM2 - KM\", \n    \"grf - Causal Survival Forest\", \"RISCA - IPTW KM\", \n    \"RISCA - G_formula (S-learner)\"\n  )\n  \n  # If estimator is \"all\", we select all the estimators in \n  # available_estimators\n  if (\"all\" %in% estimator) {\n    estimator <- available_estimators\n  }\n  \n  # Filter the selected estimators\n  estimator <- intersect(estimator, available_estimators)\n  \n  # Store the results in a data frame\n  results <- data.frame(\n    \"sample.size\" = numeric(),\n    \"estimate\" = numeric(),\n    \"estimator\" = character(),\n    \"nuisance\" = character()\n  )\n  \n  # Function to extract variable names from I() for squared terms and interaction terms\n  extract_vars <- function(names) {\n    # Extract names from squared terms\n    extracted_squared <- gsub(\"I\\\\((.*)\\\\^2\\\\)\", \"\\\\1\", names)  # Replace \"I(X^2)\" with \"X\"\n    # Extract names from interaction terms (e.g., \"X1:X2\" becomes \"X1\" and \"X2\")\n    result_vector <- unique(unlist(strsplit(extracted_squared, \":\")))\n    return(unique(result_vector))\n  }\n  # Combine all vectors\n  all_names <- c(X.names.propensity, X.names.outcome, X.names.censoring)\n  # Apply the extraction function\n  X.names <- extract_vars(all_names)\n  \n  # Each estimator is computed if selected\n  # Naive estimator\n  if (\"Naive\" %in% estimator) {\n    ATE_naive <- Naive(data, tau)\n    results <- rbind(results, data.frame(\n      \"sample.size\" = sample.size, \"estimate\" = ATE_naive, \n      \"estimator\" = \"Naive\", \"nuisance\" = \"\"\n    ))\n  }\n  # RMST estimate with undajusted KM\n  if (\"KM\" %in% estimator) {\n    ATE_km_rct <- RMST_1(data, tau = tau)\n    results <- rbind(results, data.frame(\n      \"sample.size\" = sample.size, \"estimate\" = ATE_km_rct$RMST, \n      \"estimator\" = \"KM\", \"nuisance\" = \"\"\n    ))\n  }\n  # RMST estimate with IPTW KM\n  if (\"IPTW KM\" %in% estimator) {\n    for (propensity_method in nuisance_propensity) {\n      ATE_km_adj <- IPTW_Kaplan_meier(data, tau = tau, \n                                      X.names.propensity = X.names.propensity, \n                                      nuisance_propensity = propensity_method, \n                                      n.folds = n.folds)\n      if (propensity_method == \"probability forest\"){propensity_name = \"Forest\"}\n      else{propensity_name = \"Log. Reg.\"}\n      est_name <- paste(\"IPTW KM (\", propensity_name, \")\", sep = \"\")\n      results <- rbind(results, data.frame(\n        \"sample.size\" = sample.size, \"estimate\" = ATE_km_adj$RMST, \n        \"estimator\" = est_name, \"nuisance\" = propensity_method\n      ))\n    }\n  }\n  \n  # RMST estimate with IPCW KM\n  if (\"IPCW KM\" %in% estimator) {\n    for (censoring_method in nuisance_censoring) {\n      ATE_IPCW <- IPCW_Kaplan_meier(data, X.names.censoring = X.names.censoring, \n                                    tau = tau, \n                                    nuisance_censoring = censoring_method, \n                                    n.folds = n.folds)\n      if (censoring_method == \"survival forest\"){censoring_name = \"Forest\"}\n      else{censoring_name = \"Cox\"}\n      est_name <- paste(\"IPCW KM (\", censoring_name, \")\", sep = \"\")\n      results <- rbind(results, data.frame(\n        \"sample.size\" = sample.size, \"estimate\" = ATE_IPCW$RMST, \n        \"estimator\" = est_name , \"nuisance\" = censoring_method\n      ))\n    }\n  }\n  # RMST estimate with BJ pseudo observations\n  if (\"BJ\" %in% estimator) {\n    for (survival_method in nuisance_survival) {\n      ATE_bj <- BJ(data, tau = tau, \n                   X.names.outcome = X.names.outcome,\n                   nuisance = survival_method, \n                   n.folds = n.folds)\n      if (survival_method == \"survival forest\"){survival_name = \"Forest\"}\n      else{survival_name = \"Cox\"}\n      est_name <- paste(\"BJ (\", survival_name, \")\", sep = \"\")\n      results <- rbind(results, data.frame(\n        \"sample.size\" = sample.size, \"estimate\" = ATE_bj$RMST, \n        \"estimator\" = est_name, \"nuisance\" = survival_method\n      ))\n    }\n  }\n  \n  # RMST estimate with g-formula two-learners\n  if (\"G_formula (T-learners)\" %in% estimator) {\n    for (survival_method in nuisance_survival) {\n      ATE_g_formula_t <- g_formula_T_learner(data, tau = tau, \n                                             X.names.outcome = X.names.outcome, \n                                             nuisance_survival = survival_method, \n                                             n.folds = n.folds)\n      if (survival_method == \"survival forest\"){survival_name = \"Forest\"}\n      else{survival_name = \"Cox\"}\n      est_name <- paste(\"G-formula (\", survival_name, \"/ T-learners)\", sep = \"\")\n      results <- rbind(results, data.frame(\n        \"sample.size\" = sample.size, \"estimate\" = ATE_g_formula_t, \n        \"estimator\" = est_name, \n        \"nuisance\" = survival_method\n      ))\n    }\n  }\n  \n  # RMST estimate with g-formula single learner\n  if (\"G_formula (S-learner)\" %in% estimator) {\n    for (survival_method in nuisance_survival) {\n      ATE_g_formula_s <- g_formula_S_learner(data, tau = tau, \n                                             X.names.outcome = X.names.outcome, \n                                             nuisance_survival = survival_method, \n                                             n.folds = n.folds)\n      if (survival_method == \"survival forest\"){survival_name = \"Forest\"}\n      else{survival_name = \"Cox\"}\n      est_name <- paste(\"G-formula (\", survival_name, \"/ S-learner)\", sep = \"\")\n      results <- rbind(results, data.frame(\n        \"sample.size\" = sample.size, \"estimate\" = ATE_g_formula_s, \n        \"estimator\" = est_name, \n        \"nuisance\" = survival_method\n      ))\n    }\n  }\n  \n  \n  # RMST estimate with IPTW with pseudo observations (BJ transformation)\n  if (\"IPTW-BJ\" %in% estimator) {\n    for (survival_method in nuisance_survival) {\n      for (propensity_method in nuisance_propensity) {\n        ATE_IPTW_bj <- IPTW_BJ(data, tau = tau, \n                               X.names.propensity = X.names.propensity, \n                               X.names.outcome = X.names.outcome, \n                               nuisance_propensity = propensity_method, \n                               nuisance = survival_method, \n                               n.folds = n.folds)\n        if (survival_method == \"survival forest\"){survival_name = \"Forest\"}\n        else{survival_name = \"Cox\"}\n        if (propensity_method == \"probability forest\"){propensity_name = \"Forest\"}\n        else{propensity_name = \"Log. Reg.\"}\n        if (propensity_name  == survival_name){\n          est_name <- paste(\"IPTW-BJ (\", survival_name, \")\", sep = \"\")\n        }\n        else{\n          est_name <- paste(\"IPTW-BJ (\", survival_name,\" & \", propensity_name , \")\", \n                            sep = \"\")}\n        \n        \n        results <- rbind(results, data.frame(\n          \"sample.size\" = sample.size, \"estimate\" = ATE_IPTW_bj, \n          \"estimator\" = est_name, \n          \"nuisance\" = paste(survival_method, propensity_method, sep = \", \")\n        ))\n      }\n    }\n  }\n  \n  # RMST estimate with IPTW-IPCW KM\n  if (\"IPTW-IPCW KM\" %in% estimator) {\n    for (censoring_method in nuisance_censoring) {\n      for (propensity_method in nuisance_propensity) {\n        ATE_iptw_ipcw_km <- IPTW_IPCW_Kaplan_meier(data, tau = tau, \n                                                   X.names.propensity = X.names.propensity, \n                                                   X.names.censoring = X.names.censoring, \n                                                   nuisance_propensity = propensity_method, \n                                                   nuisance_censoring = censoring_method, \n                                                   n.folds = n.folds)\n        if (censoring_method == \"survival forest\"){censoring_name = \"Forest\"}\n        else{censoring_name = \"Cox\"}\n        if (propensity_method == \"probability forest\"){propensity_name = \"Forest\"}\n        else{propensity_name = \"Log. Reg.\"}\n        if (propensity_name  == censoring_name){\n          est_name <- paste(\"IPTW-IPCW KM (\", censoring_name , \")\", \n                            sep = \"\")\n        }\n        else{\n          est_name <- paste(\"IPTW-IPCW KM (\", censoring_name,\" & \", propensity_name , \")\", \n                            sep = \"\")}\n        results <- rbind(results, data.frame(\n          \"sample.size\" = sample.size, \"estimate\" = ATE_iptw_ipcw_km$RMST, \n          \"estimator\" = est_name, \n          \"nuisance\" = paste(censoring_method, propensity_method, sep = \", \")\n        ))\n      }\n    }\n  }\n  \n  \n  # RMST estimate with AIPTW with pseudo observations (AIPCW transformation)\n  if (\"AIPTW-AIPCW\" %in% estimator) {\n    for (survival_method in nuisance_survival) {\n      for (propensity_method in nuisance_propensity) {\n        for (censoring_method in nuisance_censoring) {\n          ATE_aiptw_aipcw <- AIPTW_AIPCW(data, tau = tau, \n                                         X.names.propensity = X.names.propensity, \n                                         X.names.censoring = X.names.censoring, \n                                         X.names.outcome = X.names.outcome,\n                                         nuisance_propensity = propensity_method, \n                                         nuisance_censoring = censoring_method, \n                                         nuisance_Qt = survival_method, \n                                         n.folds = n.folds)\n          if (survival_method == \"survival forest\"){survival_name = \"Forest\"}\n          else{survival_name = \"Cox\"}\n          if (propensity_method == \"probability forest\"){\n            propensity_name = \"Forest\"}\n          else{propensity_name = \"Log. Reg.\"}\n          if (censoring_method == \"survival forest\"){\n            censoring_name = \"Forest\"}\n          else{censoring_name = \"Cox\"}\n          if (censoring_name == propensity_name & censoring_name == survival_name){\n            est_name <- paste(\"AIPTW-AIPCW (\", survival_name, \")\", sep = \"\")\n          }\n          else{\n            est_name <- paste(\"AIPTW-AIPCW (\", survival_name,\" & \", \n                              censoring_name ,\" & \", propensity_name , \")\", sep = \"\")}\n          results <- rbind(results, data.frame(\n            \"sample.size\" = sample.size, \n            \"estimate\" = ATE_aiptw_aipcw$AIPTW_AIPCW_IPW_res, \n            \"estimator\" = est_name, \n            \"nuisance\" = paste(survival_method, \n                               censoring_method, \n                               propensity_method , sep = \", \")\n          ))\n        }\n      }\n    }\n  }\n  \n  # Unadjusted estimate using package from SurvRM2\n  if (\"SurvRM2 - KM\" %in% estimator) {\n    ATE_pack <- tryCatch({\n      theta_rmst_survrm2(data, tau = tau)\n    }, error = function(e) {\n      message(\"Error in ATE_pack: \", e$message)\n      return(NA) \n    })\n    results <- rbind(results, data.frame(\n      \"sample.size\" = sample.size, \"estimate\" = ATE_pack, \n      \"estimator\" = \"SurvRM2 - KM\", \"nuisance\" = \"\"\n    ))\n  }\n  # Estimate using survival random forest from grf\n  # CSF can have a misspecification only on all nuisance parameters\n  if (\"grf - Causal Survival Forest\" %in% estimator) {\n    ATE_RF <- tryCatch({\n      # If there is no misspecification, X.names has to be defined as the \n      # union of all the covariates which influence nuisance models\n      CSRF(data, X.names, tau = tau)\n    }, error = function(e) {\n      message(\"Error in ATE_RF: \", e$message)\n      return(NA) \n    })\n    results <- rbind(results, data.frame(\n      \"sample.size\" = sample.size, \"estimate\" = ATE_RF, \n      \"estimator\" = \"grf - Causal Survival Forest\", \n      \"nuisance\" = \"\"\n    ))\n  }\n  \n  if (\"RISCA - IPTW KM\" %in% estimator) {\n    for (propensity_method in nuisance_propensity) {\n      # IPTW estimate from RISCA\n      ATE_RISCA_iptw <- tryCatch({\n        RISCA_iptw(data, X.names.propensity, propensity_method, tau = tau, \n                   n.folds=n.folds)\n      }, error = function(e) {\n        message(\"Error in ATE_RISCA_iptw: \", e$message)\n        return(NA) \n      })\n      if (propensity_method == \"probability forest\"){propensity_name = \"Forest\"}\n      else{propensity_name = \"Log. Reg.\"}\n      est_name <- paste(\"RISCA - IPTW KM (\", propensity_name, \")\", sep = \"\")\n      results <- rbind(results, data.frame(\n        \"sample.size\" = sample.size, \"estimate\" = ATE_RISCA_iptw, \n        \"estimator\" = est_name, \n        \"nuisance\" = propensity_method\n      ))\n    }\n  }\n  # Only support Cox object\n  if (\"RISCA - G_formula (S-learner)\" %in% estimator) {\n    # G-formula estimate from RISCA\n    ATE_RISCA_gf <- tryCatch({\n      RISCA_gf(data, X.names.outcome, tau = tau)\n    }, error = function(e) {\n      message(\"Error in ATE_RISCA_gf: \", e$message)\n      return(NA) \n    })\n    results <- rbind(results, data.frame(\n      \"sample.size\" = sample.size, \"estimate\" = ATE_RISCA_gf, \n      \"estimator\" = \"RISCA - G_formula (S-learner)\", \n      \"nuisance\" = \"Cox\"\n    ))\n  }\n  return(results)\n}\n\n\n# Function to compute estimators for multiple simulations and sample sizes\ncompute_estimator <- function(n_sim, tau, scenario = \"RCT1\", \n                              X.names.propensity, \n                              X.names.outcome,\n                              X.names.censoring,\n                              nuisance_propensity = \"glm\", \n                              nuisance_censoring = \"cox\", \n                              nuisance_survival = \"cox\", \n                              n.folds_propensity = NULL,\n                              n.folds_censoring = NULL, \n                              n.folds_survival = NULL, coefC = NULL, \n                              parsC = NULL,\n                              parsC_A = NULL,\n                              estimator = \"all\",\n                              sample_sizes = c(500, 1000, 2000, 4000, 8000)) {\n  \n  pb_n <- txtProgressBar(min = 0, max = length(sample_sizes), \n                         style = 3, initial = 0, char = \"#\")\n  on.exit(close(pb_n))\n  \n  results <- data.frame(\n    \"sample.size\" = numeric(),\n    \"estimate\" = numeric(),\n    \"estimator\" = character(),\n    \"nuisance\" = character()\n  )\n  \n  # Loop through each sample size\n  for (idx_n in seq_along(sample_sizes)) {\n    n <- sample_sizes[idx_n]\n    \n    # Progress bar for simulations\n    pb <- txtProgressBar(min = 0, max = n_sim, style = 3, initial = 0, char = \"#\")\n    on.exit(close(pb))\n    \n    # Loop through each simulation\n    for (i in 1:n_sim) {\n      setTxtProgressBar(pb, i)\n      \n      # Simulate data based on the scenario\n      if (scenario == \"RCT1\") {\n        data <- simulate_data_RCT(n, tau = tau, \n                                  scenario = \"RCT1\")\n      } else if (scenario == \"RCT2\") {\n        data <- simulate_data_RCT(n, tau = tau, \n                                  scenario = \"RCT2\", \n                                  coefC = coefC, \n                                  parsC = parsC,\n                                  parsC_A = parsC_A)\n      } else if (scenario == \"Obs1\") {\n        data <- simulate_data_obs(n, tau = tau, \n                                  scenario = \"Obs1\")\n      } else if (scenario == \"Obs2\") {\n        data <- simulate_data_obs(n, tau = tau, \n                                  scenario = \"Obs2\", \n                                  coefC = coefC, \n                                  parsC = parsC)\n      } else if (scenario == \"Complex\") {\n        data <- simulate_data_complex(n, \n                                      tau = tau,\n                                      parsC = parsC)\n      } else if (scenario == \"Mis\") {\n        data <- simulate_data_mis(n, tau = tau)\n      }\n      \n      \n      # Compute all estimates for the simulated data\n      all <- all_estimates(data, n, tau = tau, \n                           X.names.propensity, \n                           X.names.outcome,\n                           X.names.censoring,\n                           nuisance_propensity, \n                           nuisance_censoring,\n                           nuisance_survival, \n                           n.folds_propensity = n.folds_propensity, \n                           n.folds_censoring = n.folds_censoring, \n                           n.folds_survival = n.folds_survival,\n                           estimator)\n      results <- rbind(all, results)\n    }\n    \n    close(pb)\n    setTxtProgressBar(pb_n, idx_n)\n  }\n  \n  return(results)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of simulations and tau value\nn_sim <- 100\ntau <- 25\n\n# RCT1 simulation\nsimulation_rct1 <- compute_estimator(\n      n_sim, tau = tau, scenario = \"RCT1\", \n      X.names.propensity = c(\"X1\", \"X2\", \"X3\", \"X4\"), \n      X.names.outcome = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n      X.names.censoring = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n      nuisance_propensity = c(\"glm\", \"probability forest\"), \n      nuisance_censoring = c(\"cox\", \"survival forest\"), \n      nuisance_survival = c(\"cox\", \"survival forest\"), \n      n.folds_propensity = 5,\n      n.folds_censoring = 5,\n      n.folds_survival = 5,\n      coefC = 0.03\n)\nsave(simulation_rct1, file = \"simulation_rct1.RData\")\n\n# RCT2 simulation with specific coefficients and parameters\nsimulation_rct2 <- compute_estimator(\n  n_sim, tau = tau, scenario = \"RCT2\", \n  X.names.propensity = c(\"X1\", \"X2\", \"X3\", \"X4\"), \n  X.names.outcome = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n  X.names.censoring = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n  nuisance_propensity = c(\"glm\", \"probability forest\"), \n  nuisance_censoring = c(\"cox\", \"survival forest\"), \n  nuisance_survival = c(\"cox\", \"survival forest\"), \n  n.folds_propensity = 5,\n  n.folds_censoring = 5,\n  n.folds_survival = 5,\n  coefC = 0.03, \n  parsC = c(0.7, 0.3, -0.25, -0.1), \n  parsC_A = 0\n)\nsave(simulation_rct2, file = \"simulation_rct2.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"simulations/simulation_rct1.RData\")\nload(\"simulations/simulation_rct2.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Update the theme to center the plot title\ntheme_update(plot.title = element_text(hjust = 0.5))\n\n# Define the desired order of the estimators\n\ndesired_order <- c(\n  \"Naive\",\n  \"KM\",\n  \"SurvRM2 - KM\",\n  \"IPTW KM (Log. Reg.)\",\n  \"RISCA - IPTW KM (Log. Reg.)\",\n  \"IPCW KM (Cox)\",\n  \"BJ (Cox)\",\n  \"IPTW-BJ (Cox & Log. Reg.)\",\n  \"IPTW-IPCW KM (Cox & Log. Reg.)\",\n  \"G-formula (Cox/ T-learners)\",\n  \"G-formula (Cox/ S-learner)\",\n  \"RISCA - G_formula (S-learner)\",\n  \"AIPTW-AIPCW (Cox & Cox & Log. Reg.)\",\n  \"grf - Causal Survival Forest\",\n  \"IPTW KM (Forest)\",\n  \"RISCA - IPTW KM (Forest)\",\n  \"IPCW KM (Forest)\",\n  \"BJ (Forest)\",\n  \"IPTW-BJ (Forest)\",\n  \"IPTW-IPCW KM (Forest)\",\n  \"G-formula (Forest/ T-learners)\",\n  \"G-formula (Forest/ S-learner)\",\n  \"AIPTW-AIPCW (Forest)\")\n\n# Convert sample size to a factor with levels sorted in decreasing order\nsimulation_rct1$sample.size <- factor(\n  simulation_rct1$sample.size, \n  levels = sort(unique(simulation_rct1$sample.size), decreasing = FALSE)\n)\n\n# Convert estimator column to a factor with the specified order\nsimulation_rct1$estimator <- factor(simulation_rct1$estimator, \n                                    levels = desired_order)\n\n# Create the plot for RCT + independent censoring\nsimulation_graph_rct1 <- simulation_rct1 %>%\n  ggplot(aes(\n    x = estimator, y = estimate,  \n    fill = factor(sample.size, levels = rev(levels(sample.size)))\n  )) +\n  scale_fill_brewer(palette = \"Accent\") +\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") +  # Change x-axis label\n  ylab(\"ATE\") +  # Change y-axis label\n  stat_boxplot(geom = \"errorbar\") +\n  geom_hline(\n    yintercept = truth_tau1, linetype = \"dashed\", color = \"red\", \n    alpha = 0.8, size = 0.8\n  ) +\ntheme(\n    legend.title = element_blank(), legend.position = \"bottom\",\n    legend.box = \"vertical\", legend.text = element_text(size = 18),\n    axis.text.x = element_text(angle = 35, vjust = 1, hjust = 1),  \n    # Adjust text angle for better visibility\n    axis.text = element_text(size = 15, face = \"bold\"),\n    axis.title.x = element_text(size = 16, face = \"bold\"),\n    plot.margin = margin(t = 10, r = 10, b = 50, l = 10)  # Add margin\n  ) +    \n  coord_cartesian(ylim = c(0, 15))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulation_graph_rct1 \n```\n\n::: {.cell-output-display}\n![Results of the ATE for the simulation of a RCT with independent censoring.](Notebook_causal_survival_files/figure-html/fig-rct1-1.png){#fig-rct1 width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Update the theme to center the plot title\ntheme_update(plot.title = element_text(hjust = 0.5))\n\n\n# Convert sample size to a factor with levels sorted in decreasing order\nsimulation_rct2$sample.size <- factor(\n  simulation_rct2$sample.size, \n  levels = sort(unique(simulation_rct2$sample.size), decreasing = TRUE)\n)\n\n# Convert estimator column to a factor with the specified order\nsimulation_rct2$estimator <- factor(simulation_rct2$estimator, \n                                    levels = desired_order)\n\n# Create the plot for RCT + dependent censoring\nsimulation_graph_rct2 <- simulation_rct2 %>%\n  ggplot(aes(\n    x = estimator, y = estimate,  \n    fill = factor(sample.size, levels = rev(levels(sample.size)))\n  )) +\n  scale_fill_brewer(palette = \"Accent\") +\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") +  # Change x-axis label\n  ylab(\"ATE\") +  # Change y-axis label\n  stat_boxplot(geom = \"errorbar\") +\n  geom_hline(\n    yintercept = truth_tau2, linetype = \"dashed\", color = \"red\", \n    alpha = 0.8, size = 0.8\n  ) +\n  theme(\n    legend.title = element_blank(), legend.position = \"bottom\",\n    legend.box = \"vertical\", legend.text = element_text(size = 18),\n    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  \n    # Adjust text angle for better visibility\n    axis.text = element_text(size = 15, face = \"bold\"),\n    axis.title.x = element_text(size = 16, face = \"bold\"),\n    plot.margin = margin(t = 10, r = 10, b = 50, l = 10)  # Add margin\n  ) + \n  coord_cartesian(ylim = c(0, 15))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulation_graph_rct2\n```\n\n::: {.cell-output-display}\n![Estimation results of the ATE for the simulation of a RCT with dependent censoring.](Notebook_causal_survival_files/figure-html/fig-rct2-1.png){#fig-rct2 width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Obs1:  Treatment assignment dependent on X + independent censoring\n# Obs2:  Treatment assignment dependent on X + dependent censoring (conditional \n# on X)\n\n# Function to simulate observational data for two scenarios: Obs1 and Obs2\nsimulate_data_obs <- function(n, \n                              mu = c(1, 1, -1, 1), \n                              sigma = diag(4), \n                              colnames_cov = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n                              tau,\n                              coefT0 = 0.01, \n                              parsS = c(0.5, 0.5, -0.5, 0.5),\n                              parsA = c(-1, -1, -2.5, -1), \n                              parsC_A = c(0), \n                              coefC = 0.03,\n                              parsC = c(0.7, 0.3, -0.25, -0.1), \n                              scenario = \"Obs2\") {\n  \n  # Generate covariates X from a multivariate normal distribution\n  X <- mvrnorm(n, mu, sigma)\n  X <- as.data.frame(X)\n  colnames(X) <- colnames_cov\n  \n  # Propensity score model based on X\n  e <- rowSums(as.matrix(X) %*% diag(parsA))\n  e <- plogis(e)  # Transform to probability scale\n  \n  # Treatment assignment based on the propensity score\n  A <- sapply(e, FUN = function(p) rbinom(n = 1, size = 1, prob = p))\n  \n  # Outcome model based on X\n  X_outcome <- as.matrix(X)\n  epsilon <- runif(n, min = 0.00000001, max = 1)\n  T0 <- -log(epsilon) / (coefT0 * exp(X_outcome %*% parsS))\n  \n  # Define treatment effect (shift in survival time due to treatment)\n  T1 <- T0 + 10\n  \n  if (scenario == \"Obs1\") {\n    # Scenario 1: Independent censoring\n    C <- -log(runif(n, min = 0.00000001, max = 1)) / coefC\n    \n  } else if (scenario == \"Obs2\") {\n    # Scenario 2: Dependent censoring based on X\n    X_censoring <- as.matrix(cbind(X,A))\n    parsC <- c(parsC,parsC_A)\n    \n    C <- -log(runif(n, min = 0.00000001, max = 1)) / \n      (coefC * exp(rowSums(X_censoring %*% diag(parsC))))\n    \n  } else {\n    stop(\"Invalid scenario. Choose 'Obs1' or 'Obs2'.\")\n  }\n  \n  # Determine the true survival time based on treatment\n  T_true <- A * T1 + (1 - A) * T0\n  \n  # Observed time is the minimum of the true survival time and censoring time\n  T_obs <- pmin(T_true, C)\n  \n  # Status indicator: 1 if the event (death) occurred, 0 if censored\n  status <- as.numeric(T_true <= C)\n  \n  # Restricted survival time (censored at tau)\n  T_obs_tau <- pmin(T_obs, tau)\n  status_tau <- as.numeric((T_obs > tau) | (T_obs <= tau & status == 1))\n  \n  # Compile the simulated data into a data frame\n  DATA_target_population <- data.frame(X, tau, A, T0, T1, C, T_obs, T_obs_tau, \n                                       status, status_tau, e)\n  \n  return(DATA_target_population)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Observational data with no informative censoring\ndata_obs1 <- simulate_data_obs(n = 2000, tau = 25, scenario = \"Obs1\")\n\n# Observational data simulation with dependent censoring\ndata_obs2 <- simulate_data_obs(n = 2000, tau = 25, scenario = \"Obs2\", \n                               coefC = 0.03, parsC = c(0.7,0.3,-0.25,-0.1))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Stratification by treatment \ngroup_0 <- data_obs1 %>%\n  dplyr:: filter(A == 0)%>%\n  dplyr:: select(X1,X2,X3,X4,C,T1,T0,status,T_tild=T_obs)\n\ngroup_1 <- data_obs1 %>%\n  dplyr:: filter(A == 1)%>%\n  dplyr:: select(X1,X2,X3,X4,C,T1,T0,status,T_tild=T_obs)\n\n# Summary statistics\nsummary_group_0 <- summary(group_0)\nsummary_group_1 <- summary(group_1)\n\nprint(paste(\"Descriptive statistics for group A=0:  \",nrow(group_0)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Descriptive statistics for group A=0:   1105\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary_group_0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       X1                X2                X3                 X4         \n Min.   :-2.1974   Min.   :-1.6405   Min.   :-3.16284   Min.   :-2.3559  \n 1st Qu.: 0.5192   1st Qu.: 0.5377   1st Qu.:-1.07597   1st Qu.: 0.5382  \n Median : 1.1995   Median : 1.2047   Median :-0.50478   Median : 1.2177  \n Mean   : 1.1645   Mean   : 1.1899   Mean   :-0.52891   Mean   : 1.2214  \n 3rd Qu.: 1.8102   3rd Qu.: 1.8483   3rd Qu.: 0.01511   3rd Qu.: 1.8923  \n Max.   : 4.7806   Max.   : 4.1886   Max.   : 2.17893   Max.   : 4.7592  \n       C                   T1               T0               status      \n Min.   :  0.00576   Min.   : 10.02   Min.   :  0.0248   Min.   :0.0000  \n 1st Qu.:  9.51092   1st Qu.: 12.55   1st Qu.:  2.5525   1st Qu.:0.0000  \n Median : 22.43391   Median : 18.92   Median :  8.9156   Median :1.0000  \n Mean   : 33.70573   Mean   : 29.67   Mean   : 19.6730   Mean   :0.6824  \n 3rd Qu.: 48.09286   3rd Qu.: 32.78   3rd Qu.: 22.7826   3rd Qu.:1.0000  \n Max.   :224.78071   Max.   :556.92   Max.   :546.9154   Max.   :1.0000  \n     T_tild         \n Min.   :  0.00576  \n 1st Qu.:  1.92557  \n Median :  5.58877  \n Mean   : 10.28264  \n 3rd Qu.: 13.50983  \n Max.   :132.51182  \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Descriptive statistics for group A=1:  \",nrow(group_1)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Descriptive statistics for group A=1:   895\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary_group_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       X1                 X2                X3               X4          \n Min.   :-2.31898   Min.   :-2.8291   Min.   :-4.521   Min.   :-2.10659  \n 1st Qu.: 0.03059   1st Qu.: 0.1090   1st Qu.:-2.217   1st Qu.: 0.09563  \n Median : 0.66853   Median : 0.8097   Median :-1.680   Median : 0.73956  \n Mean   : 0.70218   Mean   : 0.7676   Mean   :-1.677   Mean   : 0.78211  \n 3rd Qu.: 1.31992   3rd Qu.: 1.3897   3rd Qu.:-1.134   3rd Qu.: 1.44308  \n Max.   : 4.01668   Max.   : 4.2683   Max.   : 0.480   Max.   : 3.88687  \n       C                   T1               T0               status     \n Min.   :  0.00659   Min.   : 10.00   Min.   :  0.0041   Min.   :0.000  \n 1st Qu.:  9.49216   1st Qu.: 12.98   1st Qu.:  2.9783   1st Qu.:0.000  \n Median : 21.78398   Median : 19.63   Median :  9.6312   Median :0.000  \n Mean   : 31.49890   Mean   : 32.05   Mean   : 22.0459   Mean   :0.476  \n 3rd Qu.: 45.37890   3rd Qu.: 35.53   3rd Qu.: 25.5335   3rd Qu.:1.000  \n Max.   :251.81106   Max.   :528.24   Max.   :518.2426   Max.   :1.000  \n     T_tild         \n Min.   :  0.00659  \n 1st Qu.:  9.49216  \n Median : 13.01845  \n Mean   : 16.66189  \n 3rd Qu.: 20.34945  \n Max.   :137.73768  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Stratification by treatment \ngroup_0 <- data_obs2 %>%\n  dplyr:: filter(A == 0)%>%\n  dplyr:: select(X1,X2,X3,X4,C,T1,T0,status,status_tau,T_obs,e)\n\ngroup_1 <- data_obs2 %>%\n  dplyr:: filter(A == 1)%>%\n  dplyr:: select(X1,X2,X3,X4,C,T1,T0,status,status_tau,T_obs,e)\n\n# Summary statistics\nsummary_group_0 <- summary(group_0)\nsummary_group_1 <- summary(group_1)\n\nprint(paste(\"Descriptive statistics for group A=0:  \",nrow(group_0)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Descriptive statistics for group A=0:   1053\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary_group_0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       X1                X2                X3                 X4         \n Min.   :-1.6144   Min.   :-2.2042   Min.   :-2.60708   Min.   :-1.2120  \n 1st Qu.: 0.5123   1st Qu.: 0.5698   1st Qu.:-1.07850   1st Qu.: 0.5322  \n Median : 1.2071   Median : 1.2510   Median :-0.54038   Median : 1.1675  \n Mean   : 1.1874   Mean   : 1.2306   Mean   :-0.51552   Mean   : 1.1969  \n 3rd Qu.: 1.8486   3rd Qu.: 1.8727   3rd Qu.: 0.01441   3rd Qu.: 1.8140  \n Max.   : 4.5112   Max.   : 4.6341   Max.   : 2.13260   Max.   : 4.5197  \n       C                  T1               T0              status      \n Min.   :  0.0083   Min.   : 10.03   Min.   :  0.029   Min.   :0.0000  \n 1st Qu.:  2.3868   1st Qu.: 12.54   1st Qu.:  2.536   1st Qu.:0.0000  \n Median :  7.0825   Median : 17.43   Median :  7.427   Median :0.0000  \n Mean   : 13.0567   Mean   : 29.66   Mean   : 19.663   Mean   :0.4653  \n 3rd Qu.: 16.0874   3rd Qu.: 32.31   3rd Qu.: 22.310   3rd Qu.:1.0000  \n Max.   :131.3553   Max.   :553.01   Max.   :543.011   Max.   :1.0000  \n   status_tau         T_obs                e            \n Min.   :0.0000   Min.   :  0.0083   Min.   :0.0000149  \n 1st Qu.:0.0000   1st Qu.:  1.2340   1st Qu.:0.0230084  \n Median :1.0000   Median :  3.2787   Median :0.1082185  \n Mean   :0.5005   Mean   :  7.5822   Mean   :0.2089089  \n 3rd Qu.:1.0000   3rd Qu.:  8.3390   3rd Qu.:0.3176856  \n Max.   :1.0000   Max.   :125.6216   Max.   :0.9715510  \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Descriptive statistics for group A=1:  \",nrow(group_1)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Descriptive statistics for group A=1:   947\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary_group_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       X1                 X2                 X3                X4          \n Min.   :-2.87273   Min.   :-1.89058   Min.   :-4.4579   Min.   :-2.71738  \n 1st Qu.: 0.04777   1st Qu.: 0.08932   1st Qu.:-2.1671   1st Qu.: 0.09032  \n Median : 0.72435   Median : 0.70594   Median :-1.6626   Median : 0.68492  \n Mean   : 0.72609   Mean   : 0.71199   Mean   :-1.6287   Mean   : 0.73143  \n 3rd Qu.: 1.36651   3rd Qu.: 1.33413   3rd Qu.:-1.0657   3rd Qu.: 1.39074  \n Max.   : 3.70310   Max.   : 3.57198   Max.   : 0.8002   Max.   : 3.82956  \n       C                  T1               T0               status      \n Min.   :  0.0018   Min.   : 10.01   Min.   :  0.0131   Min.   :0.0000  \n 1st Qu.:  2.7499   1st Qu.: 13.38   1st Qu.:  3.3784   1st Qu.:0.0000  \n Median :  7.9299   Median : 19.97   Median :  9.9718   Median :0.0000  \n Mean   : 15.9444   Mean   : 35.16   Mean   : 25.1650   Mean   :0.1996  \n 3rd Qu.: 19.1185   3rd Qu.: 35.93   3rd Qu.: 25.9255   3rd Qu.:0.0000  \n Max.   :367.9343   Max.   :690.75   Max.   :680.7536   Max.   :1.0000  \n   status_tau         T_obs                 e          \n Min.   :0.0000   Min.   :  0.00178   Min.   :0.01162  \n 1st Qu.:0.0000   1st Qu.:  2.74985   1st Qu.:0.58413  \n Median :0.0000   Median :  7.92992   Median :0.84444  \n Mean   :0.2534   Mean   : 11.71323   Mean   :0.74530  \n 3rd Qu.:1.0000   3rd Qu.: 15.00144   3rd Qu.:0.96410  \n Max.   :1.0000   Max.   :193.40840   Max.   :0.99999  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulation for scenario Obs1\ndata_Obs1 <- simulate_data_obs(n = 100000, tau = 25, scenario = \"Obs1\")\n\n#plot_ground_truth(data_Obs1, \n#                  vec_tau, \n#                  tau, \n#                  c(0, 10),\n#                  \"True difference in RMST for Obs #scenario 1\")\n\ntruth_tau3 <-  ground_truth(data_Obs1, tau = 25)\nprint(paste0(\"The ground truth for Obs scenario 1 at time 25 is \", round(truth_tau3, 1)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The ground truth for Obs scenario 1 at time 25 is 7.1\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Simulation for scenario Obs2 with specific coefficients and parameters\ndata_Obs2 <- simulate_data_obs(\n  n = 100000, tau = tau, scenario = \"Obs2\", \n  coefC = 0.03, parsC = c(0.7, 0.3, -0.25, -0.1))\n\n#plot_ground_truth(data_Obs2, \n#                  vec_tau, \n#                  tau, \n#                  c(0, 10),\n#                  \"True difference in RMST for Obs #scenario 2\")\n\ntruth_tau4 <- ground_truth(data_Obs2, tau = 25)\nprint(paste0(\"The ground truth for Obs scenario 2 at #time 25 is \", round(truth_tau4, 1)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The ground truth for Obs scenario 2 at #time 25 is 7.1\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Obs1 simulation\nsimulation_obs1 <- compute_estimator(\n  n_sim, tau = tau, scenario = \"Obs1\", \n  X.names.propensity = c(\"X1\", \"X2\", \"X3\", \"X4\"), \n  X.names.outcome = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n  X.names.censoring = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n  nuisance_propensity = c(\"glm\", \"probability forest\"), \n  nuisance_censoring = c(\"cox\", \"survival forest\"), \n  nuisance_survival = c(\"cox\", \"survival forest\"), \n  n.folds_propensity = 5,\n  n.folds_censoring = 5,\n  n.folds_survival = 5,\n  coefC = 0.03\n)\nsave(simulation_obs1, file = \"simulation_obs1.RData\")\n\n\n# Obs2 simulation with specific coefficients and parameters\nsimulation_obs2 <- compute_estimator(\n  n_sim, tau = tau, scenario = \"Obs2\", \n  X.names.propensity = c(\"X1\", \"X2\", \"X3\", \"X4\"), \n  X.names.outcome = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n  X.names.censoring = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n  nuisance_propensity = c(\"glm\", \"probability forest\"), \n  nuisance_censoring = c(\"cox\", \"survival forest\"), \n  nuisance_survival = c(\"cox\", \"survival forest\"), \n  n.folds_propensity = 5,\n  n.folds_censoring = 5,\n  n.folds_survival = 5,\n  coefC = 0.03, \n  parsC = c(0.7, 0.3, -0.25, -0.1)\n)\nsave(simulation_obs2, file = \"simulation_obs2.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"simulations/simulation_obs1.RData\")\nload(\"simulations/simulation_obs2.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Update the theme to center the plot title\ntheme_update(plot.title = element_text(hjust = 0.5))\n\n# Convert sample size to a factor with levels sorted in decreasing order\nsimulation_obs1$sample.size <- factor(\n  simulation_obs1$sample.size, \n  levels = sort(unique(simulation_obs1$sample.size), decreasing = TRUE)\n)\n\n# Convert estimator column to a factor with the specified order\nsimulation_obs1$estimator <- factor(simulation_obs1$estimator, \n                                    levels = desired_order)\n\n# Create the plot for Observational + independent censoring\nsimulation_graph_obs1 <- simulation_obs1 %>%\n  ggplot(aes(\n    x = estimator, y = estimate,  \n    fill = factor(sample.size, levels = rev(levels(sample.size)))\n  )) +\n  scale_fill_brewer(palette = \"Accent\") +\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") +  # Change x-axis label\n  ylab(\"ATE\") +  # Change y-axis label\n  stat_boxplot(geom = \"errorbar\") +\n  geom_hline(\n    yintercept = truth_tau3, linetype = \"dashed\", color = \"red\", \n    alpha = 0.8, size = 0.8\n  ) +\n  theme(\n    legend.title = element_blank(), legend.position = \"bottom\",\n    legend.box = \"vertical\", legend.text = element_text(size = 18),\n    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  \n    # Adjust text angle for better visibility\n    axis.text = element_text(size = 15, face = \"bold\"),\n    axis.title.x = element_text(size = 16, face = \"bold\"),\n    plot.margin = margin(t = 10, r = 10, b = 50, l = 10)  # Add margin\n  ) + \n  coord_cartesian(ylim = c(0, 15))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulation_graph_obs1\n```\n\n::: {.cell-output-display}\n![Estimation results of the ATE for the simulation of an observational study with independent censoring.](Notebook_causal_survival_files/figure-html/fig-obs1-1.png){#fig-obs1 width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Update the theme to center the plot title\ntheme_update(plot.title = element_text(hjust = 0.5))\n\n# Convert sample size to a factor with levels sorted in decreasing order\nsimulation_obs2$sample.size <- factor(\n  simulation_obs2$sample.size, \n  levels = sort(unique(simulation_obs2$sample.size), decreasing = TRUE)\n)\n\n# Convert estimator column to a factor with the specified order\nsimulation_obs2$estimator <- factor(simulation_obs2$estimator, \n                                    levels = desired_order)\n\n# Create the plot for Observational + dependent censoring\nsimulation_graph_obs2 <- simulation_obs2 %>%\n  ggplot(aes(\n    x = estimator, y = estimate,  \n    fill = factor(sample.size, levels = rev(levels(sample.size)))\n  )) +\n  scale_fill_brewer(palette = \"Accent\") +\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") +  # Change x-axis label\n  ylab(\"ATE\") +  # Change y-axis label\n  stat_boxplot(geom = \"errorbar\") +\n  geom_hline(\n    yintercept = truth_tau4, linetype = \"dashed\", color = \"red\", \n    alpha = 0.8, size = 0.8\n  ) +\n  theme(\n    legend.title = element_blank(), legend.position = \"bottom\",\n    legend.box = \"vertical\", legend.text = element_text(size = 18),\n    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  \n    # Adjust text angle for better visibility\n    axis.text = element_text(size = 15, face = \"bold\"),\n    axis.title.x = element_text(size = 16, face = \"bold\"),\n    plot.margin = margin(t = 10, r = 10, b = 50, l = 10)  # Add margin\n  ) + \n  coord_cartesian(ylim = c(0, 15))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulation_graph_obs2\n```\n\n::: {.cell-output-display}\n![Estimation results of the ATE for the simulation of an observational study with dependent censoring.](Notebook_causal_survival_files/figure-html/fig-obs2-1.png){#fig-obs2 width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# DGP for misspecification \nsimulate_data_mis <- function(n, \n                              mu = c(0.5, 0.5, 0.7, 0.5),\n                              sigma =  matrix(c(1, 0, 0, 0, \n                                                0, 1, 0, 0, \n                                                0, 0, 1, 0,\n                                                0, 0, 0, 1), \n                                              nrow = 4, byrow = TRUE),\n                              colnames_cov = c(\"X1\", \"X2\", \"X3\", \"X4\"),\n                              parsA =  c(0.05, -0.1, 0.5, -0.1),\n                              tau){\n  \n  # Generate X from a multivariate normal distribution\n  X <- MASS::mvrnorm(n, mu, sigma)\n  X <- as.data.frame(X)\n  colnames(X) <- colnames_cov\n  \n  # Treatment variable selection: all X\n  X_treatment <- as.matrix(X)\n  \n  # Propensity score model based on X\n  e <- parsA[1]*X_treatment[, \"X1\"]^2 + parsA[2]*X_treatment[, \"X2\"]^2 + \n    parsA[3]*X_treatment[, \"X3\"]^2 + parsA[4]*X_treatment[, \"X4\"]^2-\n    X_treatment[, \"X1\"]*X_treatment[, \"X2\"] +\n    X_treatment[, \"X1\"]*X_treatment[, \"X4\"]\n  \n  # Logistic regression\n  e <- plogis(e)\n  \n  # Treatment assignment based on the propensity score\n  A <- sapply(e, FUN = function(p) rbinom(n = 1, size = 1, prob = p))\n  \n  # Outcome variable selection: all X\n  X_outcome <- as.matrix(X)\n  \n  lambda <- exp(0.2*X[,1]^2 + 0.3*X[,2]^2 + 0.1*X[,3]^2 + 0.1*X[,4]^2 + \n    X[,1] * X[,2] + X[,3] * X[,4])\n  # Simulate the outcome using the cumulative hazard inversion method\n  epsilon <- runif(n, min = 1e-8, max = 1)\n  T0 <- -log(epsilon) / lambda\n  \n  # Simulate independent censoring time\n  censoring_lambda <- exp(0.05*X[,1]^2 + 0.05*X[,2]^2-0.1*X[,3]^2 + 0.1*X[,4]^2 + \n    X[,3] * X[,1] - X[,2]*X[,4])\n  epsilon <- runif(n, min = 1e-8, max = 1)\n  C <- -log(epsilon) / censoring_lambda\n  \n  \n  # T(1) = T(0) + 1\n  T1 <- T0 + 1\n  \n  # True survival time\n  T_true <- A * T1 + (1 - A) * T0\n  \n  # Observed time\n  T_obs <- pmin(T_true, C)\n  \n  # Status indicator\n  status <- as.numeric(T_true <= C)\n  censor.status <- as.numeric(T_true > C)\n  \n  # Restricted survival time\n  T_obs_tau <- pmin(T_obs, tau)\n  status_tau <- as.numeric((T_obs > tau) | (T_obs <= tau & status == 1))\n  # Compile the simulated data into a data frame\n  DATA_target_population <- data.frame(X, tau, A, T0, T1, C, T_obs, T_obs_tau, \n                                       status, status_tau, censor.status, e)\n  \n  return(DATA_target_population)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to estimate RMST for each misspecification context\ncompute_estimator_mispec <- function(n_sim, tau, \n                                     X.names.propensity_mis, \n                                     X.names.propensity, \n                                     X.names.outcome,\n                                     X.names.outcome_mis,\n                                     X.names.censoring,\n                                     X.names.censoring_mis,\n                                     nuisance_propensity = \"glm\", \n                                     nuisance_censoring = \"cox\", \n                                     nuisance_survival = \"cox\", \n                                     n.folds_propensity = NULL,\n                                     n.folds_censoring = NULL, \n                                     n.folds_survival = NULL,\n                                     estimator = \"all\",\n                                     sample_sizes = c(8000)) {\n  \n  pb_n <- txtProgressBar(min = 0, max = length(sample_sizes) * n_sim, \n                         style = 3, initial = 0, char = \"#\")\n  on.exit(close(pb_n))\n  \n  # Initialize data frame for each misspecification\n  simulation_mis <- data.frame()\n  simulation_mistreat <- data.frame()\n  simulation_misout <- data.frame()\n  simulation_miscens <- data.frame()\n  simulation_mistreat_out <- data.frame()\n  simulation_miscens_out <- data.frame()\n  simulation_mistreat_cens <- data.frame()\n  simulation_misall <- data.frame()\n\n  # Function to compute estimators for multiple simulations and sample sizes\n  for (n in sample_sizes) {\n    for (i in 1:n_sim) {\n      setTxtProgressBar(pb_n, (which(sample_sizes == n) - 1) * n_sim + i)\n      data <- simulate_data_mis(n, tau = tau)\n\n      # Compute all estimates for the simulated data\n      res_all_mis <- all_estimates(data, n, tau = tau, \n                                   X.names.propensity = X.names.propensity, \n                                   X.names.outcome = X.names.outcome,\n                                   X.names.censoring = X.names.censoring,\n                                   nuisance_propensity = nuisance_propensity, \n                                   nuisance_censoring = nuisance_censoring,\n                                   nuisance_survival = nuisance_survival, \n                                   n.folds_propensity = n.folds_propensity, \n                                   n.folds_censoring = n.folds_censoring, \n                                   n.folds_survival = n.folds_survival,\n                                   estimator)\n      \n      res_all_mistreat <- all_estimates(data, n, tau = tau, \n                                        X.names.propensity = X.names.propensity_mis, \n                                        X.names.outcome = X.names.outcome,\n                                        X.names.censoring = X.names.censoring,\n                                        nuisance_propensity = nuisance_propensity,\n                                        nuisance_censoring = nuisance_censoring,\n                                        nuisance_survival = nuisance_survival,  \n                                        n.folds_propensity = n.folds_propensity, \n                                        n.folds_censoring = n.folds_censoring, \n                                        n.folds_survival = n.folds_survival,\n                                        estimator)\n      \n      res_all_misout <- all_estimates(data, n, tau = tau, \n                                      X.names.propensity = X.names.propensity, \n                                      X.names.outcome = X.names.outcome_mis,\n                                      X.names.censoring = X.names.censoring,\n                                      nuisance_propensity = nuisance_propensity,\n                                      nuisance_censoring = nuisance_censoring,\n                                      nuisance_survival = nuisance_survival,  \n                                      n.folds_propensity = n.folds_propensity, \n                                      n.folds_censoring = n.folds_censoring, \n                                      n.folds_survival = n.folds_survival,\n                                      estimator)\n      \n      res_all_miscens <- all_estimates(data, n, tau = tau, \n                                       X.names.propensity = X.names.propensity, \n                                       X.names.outcome = X.names.outcome,\n                                       X.names.censoring = X.names.censoring_mis,\n                                       nuisance_propensity = nuisance_propensity,\n                                       nuisance_censoring = nuisance_censoring,\n                                       nuisance_survival = nuisance_survival,  \n                                       n.folds_propensity = n.folds_propensity, \n                                       n.folds_censoring = n.folds_censoring, \n                                       n.folds_survival = n.folds_survival,\n                                       estimator)\n      \n      res_all_mistreat_out <- all_estimates(data, n, tau = tau, \n                                            X.names.propensity = X.names.propensity_mis, \n                                            X.names.outcome = X.names.outcome_mis,\n                                            X.names.censoring = X.names.censoring,\n                                            nuisance_propensity = nuisance_propensity,\n                                            nuisance_censoring = nuisance_censoring,\n                                            nuisance_survival = nuisance_survival,\n                                            n.folds_propensity = n.folds_propensity, \n                                            n.folds_censoring = n.folds_censoring, \n                                            n.folds_survival = n.folds_survival,\n                                            estimator)\n      \n      res_all_miscens_out <- all_estimates(data, n, tau = tau, \n                                           X.names.propensity = X.names.propensity, \n                                           X.names.outcome = X.names.outcome_mis,\n                                           X.names.censoring = X.names.censoring_mis,\n                                           nuisance_propensity = nuisance_propensity,\n                                           nuisance_censoring = nuisance_censoring,\n                                           nuisance_survival = nuisance_survival,\n                                           n.folds_propensity = n.folds_propensity, \n                                           n.folds_censoring = n.folds_censoring, \n                                           n.folds_survival = n.folds_survival,\n                                           estimator)\n      \n      res_all_mistreat_cens <- all_estimates(data, n, tau = tau, \n                                             X.names.propensity = X.names.propensity_mis, \n                                             X.names.outcome = X.names.outcome,\n                                             X.names.censoring = X.names.censoring_mis,\n                                             nuisance_propensity = nuisance_propensity,\n                                             nuisance_censoring = nuisance_censoring,\n                                             nuisance_survival = nuisance_survival,\n                                             n.folds_propensity = n.folds_propensity, \n                                             n.folds_censoring = n.folds_censoring, \n                                             n.folds_survival = n.folds_survival,\n                                             estimator)\n      \n      res_all_misall <- all_estimates(data, n, tau = tau, \n                                      X.names.propensity = X.names.propensity_mis, \n                                      X.names.outcome = X.names.outcome_mis,\n                                      X.names.censoring = X.names.censoring_mis,\n                                      nuisance_propensity = nuisance_propensity,\n                                      nuisance_censoring = nuisance_censoring,\n                                      nuisance_survival = nuisance_survival,\n                                      n.folds_propensity = n.folds_propensity, \n                                      n.folds_censoring = n.folds_censoring, \n                                      n.folds_survival = n.folds_survival,\n                                      estimator)\n      \n      # Store the results\n      simulation_mis <- rbind(simulation_mis, res_all_mis)\n      simulation_mistreat <- rbind(simulation_mistreat, res_all_mistreat)\n      simulation_misout <- rbind(simulation_misout, res_all_misout)\n      simulation_miscens <- rbind(simulation_miscens, res_all_miscens)\n      simulation_mistreat_out <- rbind(simulation_mistreat_out, res_all_mistreat_out)\n      simulation_miscens_out <- rbind(simulation_miscens_out, res_all_miscens_out)\n      simulation_mistreat_cens <- rbind(simulation_mistreat_cens, res_all_mistreat_cens)\n      simulation_misall <- rbind(simulation_misall, res_all_misall)\n    }\n  }\n  \n  # Fusion of dataframe\n  return(list(\n    simulation_mis = simulation_mis,\n    simulation_mistreat = simulation_mistreat,\n    simulation_misout = simulation_misout,\n    simulation_miscens = simulation_miscens,\n    simulation_mistreat_out = simulation_mistreat_out,\n    simulation_miscens_out = simulation_miscens_out,\n    simulation_mistreat_cens = simulation_mistreat_cens,\n    simulation_misall = simulation_misall\n  ))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmis <- simulate_data_mis(n=2000,tau=0.5)\nsummary(mis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       X1                X2                X3                 X4         \n Min.   :-2.8600   Min.   :-2.9059   Min.   :-2.99138   Min.   :-2.8605  \n 1st Qu.:-0.2106   1st Qu.:-0.1803   1st Qu.: 0.03891   1st Qu.:-0.1340  \n Median : 0.5009   Median : 0.4853   Median : 0.69218   Median : 0.5187  \n Mean   : 0.5022   Mean   : 0.4836   Mean   : 0.71847   Mean   : 0.5101  \n 3rd Qu.: 1.1840   3rd Qu.: 1.1479   3rd Qu.: 1.38870   3rd Qu.: 1.1700  \n Max.   : 4.5203   Max.   : 3.5098   Max.   : 3.82458   Max.   : 4.4653  \n      tau            A              T0                  T1         \n Min.   :0.5   Min.   :0.00   Min.   :  0.00000   Min.   :  1.000  \n 1st Qu.:0.5   1st Qu.:0.00   1st Qu.:  0.03379   1st Qu.:  1.034  \n Median :0.5   Median :1.00   Median :  0.19568   Median :  1.196  \n Mean   :0.5   Mean   :0.57   Mean   :  0.93542   Mean   :  1.935  \n 3rd Qu.:0.5   3rd Qu.:1.00   3rd Qu.:  0.66646   3rd Qu.:  1.666  \n Max.   :0.5   Max.   :1.00   Max.   :152.28768   Max.   :153.288  \n       C                T_obs            T_obs_tau             status      \n Min.   :   0.000   Min.   : 0.00000   Min.   :0.0000001   Min.   :0.0000  \n 1st Qu.:   0.133   1st Qu.: 0.04952   1st Qu.:0.0495247   1st Qu.:0.0000  \n Median :   0.503   Median : 0.23069   Median :0.2306885   Median :0.0000  \n Mean   :   9.144   Mean   : 0.49493   Mean   :0.2627192   Mean   :0.4415  \n 3rd Qu.:   1.658   3rd Qu.: 0.82697   3rd Qu.:0.5000000   3rd Qu.:1.0000  \n Max.   :5986.200   Max.   :11.71621   Max.   :0.5000000   Max.   :1.0000  \n   status_tau    censor.status          e            \n Min.   :0.000   Min.   :0.0000   Min.   :0.0000961  \n 1st Qu.:0.000   1st Qu.:0.0000   1st Qu.:0.4019395  \n Median :1.000   Median :1.0000   Median :0.5878822  \n Mean   :0.592   Mean   :0.5585   Mean   :0.5871652  \n 3rd Qu.:1.000   3rd Qu.:1.0000   3rd Qu.:0.8173570  \n Max.   :1.000   Max.   :1.0000   Max.   :0.9999530  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Stratification by treatment \ngroup_0 <- mis %>%\n  dplyr:: filter(A == 0)%>%\n  dplyr:: select(X1,X2,X3,C,T1,T0,status,T_obs,status_tau,e)\n\ngroup_1 <- mis %>%\n  dplyr:: filter(A == 1)%>%\n  dplyr:: select(X1,X2,X3,C,T1,T0,status,T_obs,status_tau,e)\n\n# Summary statistics\nsummary_group_0 <- summary(group_0)\nsummary_group_1 <- summary(group_1)\n\nprint(paste(\"Descriptive statistics for group A=0:  \",nrow(group_0)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Descriptive statistics for group A=0:   860\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary_group_0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       X1                X2                 X3                 C           \n Min.   :-2.5817   Min.   :-2.90589   Min.   :-2.99138   Min.   :   0.000  \n 1st Qu.:-0.2517   1st Qu.: 0.05475   1st Qu.:-0.05958   1st Qu.:   0.153  \n Median : 0.4815   Median : 0.70966   Median : 0.47507   Median :   0.522  \n Mean   : 0.4728   Mean   : 0.70235   Mean   : 0.46829   Mean   :  12.297  \n 3rd Qu.: 1.1578   3rd Qu.: 1.38250   3rd Qu.: 0.98730   3rd Qu.:   1.707  \n Max.   : 3.6619   Max.   : 3.50980   Max.   : 2.84611   Max.   :5986.200  \n       T1               T0               status          T_obs        \n Min.   : 1.000   Min.   : 0.00000   Min.   :0.000   Min.   :0.00000  \n 1st Qu.: 1.032   1st Qu.: 0.03165   1st Qu.:0.000   1st Qu.:0.01832  \n Median : 1.183   Median : 0.18318   Median :1.000   Median :0.09783  \n Mean   : 1.613   Mean   : 0.61271   Mean   :0.664   Mean   :0.25392  \n 3rd Qu.: 1.571   3rd Qu.: 0.57053   3rd Qu.:1.000   3rd Qu.:0.29457  \n Max.   :35.044   Max.   :34.04426   Max.   :1.000   Max.   :3.86215  \n   status_tau           e            \n Min.   :0.0000   Min.   :0.0000961  \n 1st Qu.:0.0000   1st Qu.:0.2541850  \n Median :1.0000   Median :0.4381317  \n Mean   :0.7221   Mean   :0.4213279  \n 3rd Qu.:1.0000   3rd Qu.:0.5863077  \n Max.   :1.0000   Max.   :0.9793703  \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Descriptive statistics for group A=1:  \",nrow(group_1)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Descriptive statistics for group A=1:   1140\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary_group_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       X1                X2                X3                C            \n Min.   :-2.8600   Min.   :-2.8817   Min.   :-2.4432   Min.   :   0.0000  \n 1st Qu.:-0.1663   1st Qu.:-0.3226   1st Qu.: 0.1310   1st Qu.:   0.1236  \n Median : 0.5094   Median : 0.3139   Median : 0.8959   Median :   0.4842  \n Mean   : 0.5243   Mean   : 0.3185   Mean   : 0.9072   Mean   :   6.7659  \n 3rd Qu.: 1.1919   3rd Qu.: 0.9675   3rd Qu.: 1.6687   3rd Qu.:   1.6131  \n Max.   : 4.5203   Max.   : 3.2796   Max.   : 3.8246   Max.   :1564.6155  \n       T1                T0                status           T_obs          \n Min.   :  1.000   Min.   :  0.00000   Min.   :0.0000   Min.   : 0.000036  \n 1st Qu.:  1.036   1st Qu.:  0.03593   1st Qu.:0.0000   1st Qu.: 0.123554  \n Median :  1.209   Median :  0.20905   Median :0.0000   Median : 0.484236  \n Mean   :  2.179   Mean   :  1.17887   Mean   :0.2737   Mean   : 0.676740  \n 3rd Qu.:  1.729   3rd Qu.:  0.72861   3rd Qu.:1.0000   3rd Qu.: 1.035239  \n Max.   :153.288   Max.   :152.28768   Max.   :1.0000   Max.   :11.716206  \n   status_tau           e          \n Min.   :0.0000   Min.   :0.01308  \n 1st Qu.:0.0000   1st Qu.:0.54609  \n Median :0.0000   Median :0.74240  \n Mean   :0.4939   Mean   :0.71227  \n 3rd Qu.:1.0000   3rd Qu.:0.90141  \n Max.   :1.0000   Max.   :0.99995  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mis scenario \ntau_mis <- 0.5\nvec_tau_complex <- seq(0, 10, by = 0.05)\ndata_mis <- simulate_data_mis(n = 150000, tau = tau_mis)\n\n#plot_ground_truth(data_mis,\n#                  vec_tau_complex, \n#                  tau_mis, \n#                  c(0, 1), \n#                  \"True difference in RMST for Mis scenario\")\n\ntruth_complex_mis <- ground_truth(data_mis, tau = tau_mis)\n\nprint(paste0(\"The ground truth for mis scenario at time 0.45 is \", round(truth_complex_mis,2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The ground truth for mis scenario at time 0.45 is 0.26\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_sim <- 100\ntau <- 0.5\nsimulation_mis <- compute_estimator(\n  n_sim, tau = tau, scenario = \"Mis\", \n  X.names.propensity = c(\"I(X1^2)\", \"I(X2^2)\",\"I(X3^2)\", \"I(X4^2)\", \n                         \"X1*X2\",\"X1*X4\"),\n  X.names.outcome = c(\"I(X1^2)\", \"I(X2^2)\",\"I(X3^2)\", \"I(X4^2)\", \n                      \"X1:X2\", \"X3:X4\"),\n  X.names.censoring = c(\"I(X1^2)\", \"I(X2^2)\",\"I(X3^2)\", \"I(X4^2)\", \n                        \"X1:X3\", \"X2:X4\"),\n  nuisance_propensity = c(\"glm\"), \n  nuisance_censoring = c(\"cox\"), \n  nuisance_survival = c(\"cox\"), \n  n.folds_propensity = NULL,\n  n.folds_censoring = NULL,\n  n.folds_survival = NULL,\n  sample_sizes = c(500, 1000, 2000, 4000, 8000),\n  estimator = c(\"Naive\", \"KM\", \"IPTW KM\", \"IPCW KM\", \"BJ\", \n                \"IPTW-IPCW KM\", \"IPTW-BJ\", \"G_formula (T-learners)\", \n                \"G_formula (S-learner)\", \"AIPTW-AIPCW\")\n)\nsave(simulation_mis, file=\"simulation_mis.RData\") \n\nsimulation_mis_c <- compute_estimator(\n  n_sim, tau = tau, scenario = \"Mis\", \n  X.names.propensity = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n  X.names.outcome = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n  X.names.censoring = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n  nuisance_propensity = c(\"probability forest\"), \n  nuisance_censoring = c(\"survival forest\"), \n  nuisance_survival = c(\"survival forest\"), \n  n.folds_propensity = 5,\n  n.folds_censoring = 5,\n  n.folds_survival = 5,\n  sample_sizes = c(500, 1000, 2000, 4000, 8000),\n  estimator = c(\"IPTW KM\", \"IPCW KM\", \"BJ\", \n                \"IPTW-IPCW KM\", \"IPTW-BJ\", \"G_formula (T-learners)\", \n                \"G_formula (S-learner)\", \"AIPTW-AIPCW\",\n                \"grf - Causal Survival Forest\")\n)\n\nsave(simulation_mis_c, file=\"simulation_mis_c.RData\") \n\nsimulation_mis_c_16000 <- compute_estimator(\n  n_sim, tau = tau, scenario = \"Mis\", \n  X.names.propensity = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n  X.names.outcome = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n  X.names.censoring = c(\"X1\",\"X2\",\"X3\",\"X4\"),\n  nuisance_propensity = c(\"probability forest\"), \n  nuisance_censoring = c(\"survival forest\"), \n  nuisance_survival = c(\"survival forest\"), \n  n.folds_propensity = 5,\n  n.folds_censoring = 5,\n  n.folds_survival = 5,\n  sample_sizes = 16000,\n  estimator = c(\"IPTW KM\", \"G_formula (T-learners)\")\n)\nsave(simulation_mis_c_16000, file=\"simulation_mis_c_16000.RData\")  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"simulations/simulation_mis.RData\")\nload(\"simulations/simulation_mis_c.RData\")\nload(\"simulations/simulation_mis_c_16000.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the desired order of the estimators\nsimulation_mis2 <- rbind(simulation_mis,simulation_mis_c)\nsimulation_mis2 <- rbind(simulation_mis2,simulation_mis_c_16000)\n\ndesired_order <- c(\n  \"Naive\",\n  \"KM\",\n  \"SurvRM2 - KM\",\n  \"IPTW KM (Log. Reg.)\",\n  \"IPCW KM (Cox)\",\n  \"BJ (Cox)\",\n  \"IPTW-BJ (Cox & Log. Reg.)\",\n  \"IPTW-IPCW KM (Cox & Log. Reg.)\",\n  \"G-formula (Cox/ T-learners)\",\n  \"G-formula (Cox/ S-learner)\",\n  \"AIPTW-AIPCW (Cox & Cox & Log. Reg.)\",\n  \"grf - Causal Survival Forest\",\n  \"IPTW KM (Forest)\",\n  \"IPCW KM (Forest)\",\n  \"BJ (Forest)\",\n  \"IPTW-BJ (Forest)\",\n  \"IPTW-IPCW KM (Forest)\",\n  \"G-formula (Forest/ T-learners)\",\n  \"G-formula (Forest/ S-learner)\",\n  \"AIPTW-AIPCW (Forest)\")\n\ntheme_update(plot.title = element_text(hjust = 0.5))\n\nsimulation_mis2$sample.size <- factor(simulation_mis2$sample.size, \n                                      levels = sort(unique(simulation_mis2$sample.size), \n                                                    decreasing = TRUE))\n\n# Convert 'estimator' column to a factor with the specified order\nsimulation_mis2$estimator <- factor(simulation_mis2$estimator, levels = desired_order)\n\nsimulation_graph_mis <- simulation_mis2 %>%\n  ggplot(aes(x = estimator, y = estimate,  fill = factor(sample.size, \n                                                         levels = rev(levels(sample.size))))) +\n  scale_fill_brewer(palette = \"Accent\") +\n  ggtitle(\"No misspecification:  \")+\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") +  # Changer le label de l'axe x\n  ylab(\"ATE\") +  # Retirer le label de l'axe y\n  stat_boxplot(geom=\"errorbar\")+\n  geom_hline(yintercept = truth_complex_mis , linetype = \"dashed\", color = \"red\", alpha = 0.8,\n             size = 0.8) +  # Changer geom_hline en geom_vline\n  theme(legend.title = element_blank(), legend.position = \"bottom\",\n          legend.box = \"vertical\", legend.text = element_text(size=18),\n          axis.text.x = element_text(size = 15, angle = 45, vjust = 1, hjust = 1),\n          axis.text.y = element_text(size = 15),\n          axis.text = element_text(size=20, face = \"bold\"),\n          plot.title = element_text(size=24, face = \"bold\"),\n          axis.title.x = element_text(size=20, face = \"bold\"))+\n            coord_cartesian(ylim = c(0.1,0.4))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulation_graph_mis\n```\n\n::: {.cell-output-display}\n![Estimation results of the ATE for the simulation of an observational study with dependent censoring and non linear relationships.](Notebook_causal_survival_files/figure-html/fig-mis3-1.png){#fig-mis3 width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_sim <- 100\ntau <- 0.5\nmis <- compute_estimator_mispec(n_sim, tau = tau, \n                                   X.names.propensity = c(\"I(X1^2)\", \"I(X2^2)\",\n                                                          \"I(X3^2)\", \"I(X4^2)\", \n                                                          \"X1*X2\",\"X1*X4\"),\n                                   X.names.outcome = c(\"I(X1^2)\", \"I(X2^2)\",\n                                                       \"I(X3^2)\", \"I(X4^2)\", \n                                                       \"X1:X2\", \"X3:X4\"),\n                                   X.names.censoring = c(\"I(X1^2)\", \"I(X2^2)\",\n                                                         \"I(X3^2)\", \"I(X4^2)\", \n                                                         \"X1:X3\", \"X2:X4\"),\n                                   X.names.propensity_mis = c(\"I(X1^2)\",\"I(X2^2)\",\n                                                              \"I(X3^2)\", \"I(X4^2)\"),\n                                   X.names.outcome_mis = c(\"I(X1^2)\", \"I(X2^2)\",\n                                                           \"I(X3^2)\", \"I(X4^2)\"),\n                                   X.names.censoring_mis = c(\"I(X1^2)\", \"I(X2^2)\",\n                                                             \"I(X3^2)\", \"I(X4^2)\"),\n                                   nuisance_propensity = c(\"glm\"), \n                                   nuisance_censoring = c(\"cox\"), \n                                   nuisance_survival = c(\"cox\"),\n                                   estimator = estimators,\n                                   sample_size = 8000)\n\n\n# Initialize a list to decompose the results\nmerged_results <- list()\n\n# All the defined sceanario\nscenarios <- c(\"simulation_mis\", \"simulation_mistreat\", \"simulation_misout\",\n               \"simulation_miscens\", \"simulation_mistreat_out\", \n               \"simulation_miscens_out\", \"simulation_mistreat_cens\", \n               \"simulation_misall\")\n\n# Loop through all scenarios\nfor (s in scenarios) {\n  # Initialize an empty dataframe\n  scenario_results <- data.frame()\n  \n  # Loop through all sample sizes\n  for (i in seq_along(sample_sizes)) {\n    # Append the results for the given scenario and sample size \n    scenario_results <- rbind(scenario_results, results[[i]][[s]])\n  }\n  \n  # Add the results for the given scenario to the results list \n  merged_results[[s]] <- scenario_results\n  \n  # Save the final results for the given scenario in an .RData file\n  assign(paste0(s), scenario_results)\n  save(list = paste0(s), file = sprintf(\"%s.RData\", s))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"simulations/simulation_mis2.RData\")\nload(\"simulations/simulation_mistreat.RData\")\nload(\"simulations/simulation_miscens.RData\")\nload(\"simulations/simulation_misout.RData\")\n\n# Define the desired order of the estimators\ndesired_order_mis <- c(\n  \"Naive\", \"KM\",\n\"IPTW KM (Log. Reg.)\",\n  \"IPCW KM (Cox)\", \"BJ (Cox)\",  \"IPTW-BJ (Cox & Log. Reg.)\", \n\"IPTW-IPCW KM (Cox & Log. Reg.)\",\n  \"G-formula (Cox/ T-learners)\", \"G-formula (Cox/ S-learner)\",\n  \"AIPTW-AIPCW (Cox & Cox & Log. Reg.)\"\n)\n\nsimulation_mis2 <- simulation_mis2[simulation_mis2$estimator %in% desired_order_mis, ]\n\n\ntheme_update(plot.title = element_text(hjust = 0.5))\n\nsimulation_mis2$sample.size <- factor(simulation_mis2$sample.size, \n                                      levels = sort(unique(simulation_mis2$sample.size), \n                                                    decreasing = TRUE))\n\n# Convert 'estimator' column to a factor with the specified order\nsimulation_mis2$estimator <- factor(simulation_mis2$estimator, levels = desired_order)\n\nsimulation_graph_mis2 <- simulation_mis2 %>%\n  ggplot(aes(x = estimator, y = estimate,  fill = factor(sample.size, \n                                                         levels = rev(levels(sample.size))))) +\n  scale_fill_brewer(palette = \"Accent\") +\n  ggtitle(\"No misspecification:  \")+\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") +\n  ylab(\"ATE\") + \n  stat_boxplot(geom=\"errorbar\")+\n  geom_hline(yintercept = truth_complex_mis , linetype = \"dashed\", color = \"red\", alpha = 0.8,\n             size = 0.8) +  # Change geom_hline to geom_vline\n  theme(legend.title = element_blank(), legend.position = \"bottom\",\n          legend.box = \"vertical\", legend.text = element_text(size=18),\n          axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  # Adjust text angle for better visibility\n          axis.text = element_text(size=20, face = \"bold\"),\n          plot.title = element_text(size=24, face = \"bold\"),\n          axis.title.x = element_text(size=20, face = \"bold\"))+\n            coord_cartesian(ylim = c(0.1,0.4))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_update(plot.title = element_text(hjust = 0.5))\n\nsimulation_mistreat$sample.size <- factor(simulation_mistreat$sample.size, levels = sort(unique(simulation_mistreat$sample.size), decreasing = TRUE))\n\n\n# Convert 'estimator' column to a factor with the specified order\nsimulation_mistreat$estimator <- factor(simulation_mistreat$estimator, levels = desired_order_mis)\n\nsimulation_graph_mis_mistreat <- simulation_mistreat %>%\n  ggplot(aes(x = estimator, y = estimate,  fill = factor(sample.size, levels = rev(levels(sample.size))))) +\n  scale_fill_brewer(palette = \"Accent\") +\n  ggtitle(\"Misspecification of treatment model:  \")+\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") +  \n  ylab(\"ATE\") + \n  stat_boxplot(geom=\"errorbar\")+\n  geom_hline(yintercept = truth_complex_mis , linetype = \"dashed\", color = \"red\", alpha = 0.8,\n             size = 0.8) +  # Changer geom_hline en geom_vline\n  theme(legend.title = element_blank(), legend.position = \"bottom\",\n          legend.box = \"vertical\", legend.text = element_text(size=18),\n          axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  # Adjust text angle for better visibility\n          axis.text = element_text(size=20, face = \"bold\"),\n          plot.title = element_text(size=24, face = \"bold\"),\n          axis.title.x = element_text(size=20, face = \"bold\"))+\n            coord_cartesian(ylim = c(0.1,0.4))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_update(plot.title = element_text(hjust = 0.5))\n\nsimulation_miscens$sample.size <- factor(simulation_miscens$sample.size, levels = sort(unique(simulation_miscens$sample.size), decreasing = TRUE))\n\n\n# Convert 'estimator' column to a factor with the specified order\nsimulation_miscens$estimator <- factor(simulation_miscens$estimator, levels = desired_order_mis)\n\nsimulation_graph_mis_miscens <- simulation_miscens %>%\n  ggplot(aes(x = estimator, y = estimate,  fill = factor(sample.size, levels = rev(levels(sample.size))))) +\n  scale_fill_brewer(palette = \"Accent\") +\n  ggtitle(\"Misspecification of censoring model:  \")+\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") +\n  ylab(\"ATE\") +\n  stat_boxplot(geom=\"errorbar\")+\n  geom_hline(yintercept = truth_complex_mis , linetype = \"dashed\", color = \"red\", alpha = 0.8,\n             size = 0.8) +  # Change geom_hline to geom_vline\n  theme(legend.title = element_blank(), legend.position = \"bottom\",\n          legend.box = \"vertical\", legend.text = element_text(size=18),\n          axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  # Adjust text angle for better visibility\n          axis.text = element_text(size=20, face = \"bold\"),\n          plot.title = element_text(size=24, face = \"bold\"),\n          axis.title.x = element_text(size=20, face = \"bold\"))+\n            coord_cartesian(ylim = c(0.1,0.4))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_update(plot.title = element_text(hjust = 0.5))\n\nsimulation_misout$sample.size <- factor(simulation_misout$sample.size, levels = sort(unique(simulation_misout$sample.size), decreasing = TRUE))\n\n# Convert 'estimator' column to a factor with the specified order\nsimulation_misout$estimator <- factor(simulation_misout$estimator, levels = desired_order_mis)\n\nsimulation_graph_mis_misout <- simulation_misout %>%\n  ggplot(aes(x = estimator, y = estimate,  fill = factor(sample.size, levels = rev(levels(sample.size))))) +\n  scale_fill_brewer(palette = \"Accent\") +\n  ggtitle(\"Misspecification of outcome model:  \")+\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") + \n  ylab(\"ATE\") + \n  stat_boxplot(geom=\"errorbar\")+\n  geom_hline(yintercept = truth_complex_mis , linetype = \"dashed\", color = \"red\", alpha = 0.8,\n             size = 0.8) +  # Changer geom_hline to geom_vline\n  theme(legend.title = element_blank(), legend.position = \"bottom\",\n          legend.box = \"vertical\", legend.text = element_text(size=18),\n          axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  # Adjust text angle for better visibility\n          axis.text = element_text(size=20, face = \"bold\"),\n          plot.title = element_text(size=24, face = \"bold\"),\n          axis.title.x = element_text(size=20, face = \"bold\"))+\n            coord_cartesian(ylim = c(0.1,0.4))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.arrange(simulation_graph_mis2, simulation_graph_mis_miscens, simulation_graph_mis_misout, simulation_graph_mis_mistreat, ncol = 2, nrow = 2)\n```\n\n::: {.cell-output-display}\n![Estimation results of the ATE for an observational study with dependent censoring in case of a single misspecification.](Notebook_causal_survival_files/figure-html/fig-mis-1.png){#fig-mis width=2400}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"simulations/simulation_mistreat_out.RData\")\nload(\"simulations/simulation_miscens_out.RData\")\nload(\"simulations/simulation_mistreat_cens.RData\")\nload(\"simulations/simulation_misall.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_update(plot.title = element_text(hjust = 0.5))\n\nsimulation_mistreat_out$sample.size <- factor(simulation_mistreat_out$sample.size, levels = sort(unique(simulation_mistreat_out$sample.size), decreasing = TRUE))\n\n# Convert 'estimator' column to a factor with the specified order\nsimulation_mistreat_out$estimator <- factor(simulation_mistreat_out$estimator, levels = desired_order_mis)\n\nsimulation_graph_mis_mistreat_out <- simulation_mistreat_out %>%\n  ggplot(aes(x = estimator, y = estimate,  fill = factor(sample.size, levels = rev(levels(sample.size))))) +\n  scale_fill_brewer(palette = \"Accent\") +\n  ggtitle(\"Misspecification of outcome and treatment model:  \")+\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") + \n  ylab(\"ATE\") +\n  stat_boxplot(geom=\"errorbar\")+\n  geom_hline(yintercept = truth_complex_mis , linetype = \"dashed\", color = \"red\", alpha = 0.8,\n             size = 0.8) +  # Change geom_hline to geom_vline\n  theme(legend.title = element_blank(), legend.position = \"bottom\",\n          legend.box = \"vertical\", legend.text = element_text(size=18),\n          axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  # Adjust text angle for better visibility\n          axis.text = element_text(size=20, face = \"bold\"),\n          plot.title = element_text(size=24, face = \"bold\"),\n          axis.title.x = element_text(size=20, face = \"bold\"))+\n            coord_cartesian(ylim = c(0.1,0.4))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_update(plot.title = element_text(hjust = 0.5))\n\nsimulation_miscens_out$sample.size <- factor(simulation_miscens_out$sample.size, levels = sort(unique(simulation_miscens_out$sample.size), decreasing = TRUE))\n\n# Convert 'estimator' column to a factor with the specified order\nsimulation_miscens_out$estimator <- factor(simulation_miscens_out$estimator, levels = desired_order_mis)\n#simulation_mis$estimator[is.na(simulation_mis$estimator)] <- \"G_formula (S-learner)\"\n\nsimulation_graph_mis_miscens_out <- simulation_miscens_out %>%\n  ggplot(aes(x = estimator, y = estimate,  fill = factor(sample.size, levels = rev(levels(sample.size))))) +\n  scale_fill_brewer(palette = \"Accent\") +\n  ggtitle(\"Misspecification of censoring and outcome model:  \")+\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") +  \n  ylab(\"ATE\") + \n  stat_boxplot(geom=\"errorbar\")+\n  geom_hline(yintercept = truth_complex_mis , linetype = \"dashed\", color = \"red\", alpha = 0.8,\n             size = 0.8) +  # Change geom_hline to geom_vline\n  theme(legend.title = element_blank(), legend.position = \"bottom\",\n          legend.box = \"vertical\", legend.text = element_text(size=18),\n          axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  # Adjust text angle for better visibility\n          axis.text = element_text(size=20, face = \"bold\"),\n          plot.title = element_text(size=24, face = \"bold\"),\n          axis.title.x = element_text(size=20, face = \"bold\"))+\n            coord_cartesian(ylim = c(0.1,0.4))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_update(plot.title = element_text(hjust = 0.5))\n\nsimulation_mistreat_cens$sample.size <- factor(simulation_mistreat_cens$sample.size, levels = sort(unique(simulation_mistreat_cens$sample.size), decreasing = TRUE))\n\n# Convert 'estimator' column to a factor with the specified order\nsimulation_mistreat_cens$estimator <- factor(simulation_mistreat_cens$estimator, levels = desired_order_mis)\n#simulation_mis$estimator[is.na(simulation_mis$estimator)] <- \"G_formula (S-learner)\"\n\nsimulation_graph_mis_mistreat_cens <- simulation_mistreat_cens %>%\n  ggplot(aes(x = estimator, y = estimate,  fill = factor(sample.size, levels = rev(levels(sample.size))))) +\n  scale_fill_brewer(palette = \"Accent\") +\n  ggtitle(\"Misspecification of censoring and treatment model:  \")+\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") + \n  ylab(\"ATE\") + \n  stat_boxplot(geom=\"errorbar\")+\n  geom_hline(yintercept = truth_complex_mis , linetype = \"dashed\", color = \"red\", alpha = 0.8,\n             size = 0.8) +  # Change geom_hline to geom_vline\n  theme(legend.title = element_blank(), legend.position = \"bottom\",\n          legend.box = \"vertical\", legend.text = element_text(size=18),\n          axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  # Adjust text angle for better visibility\n          axis.text = element_text(size=20, face = \"bold\"),\n          plot.title = element_text(size=24, face = \"bold\"),\n          axis.title.x = element_text(size=20, face = \"bold\"))+\n            coord_cartesian(ylim = c(0.1,0.4))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_update(plot.title = element_text(hjust = 0.5))\n\nsimulation_misall$sample.size <- factor(simulation_misall$sample.size, levels = sort(unique(simulation_misall$sample.size), decreasing = TRUE))\n\n\n# Convert 'estimator' column to a factor with the specified order\nsimulation_misall$estimator <- factor(simulation_misall$estimator, levels = desired_order_mis)\n#simulation_mis$estimator[is.na(simulation_mis$estimator)] <- \"G_formula (S-learner)\"\n\nsimulation_graph_mis_all <- simulation_misall %>%\n  ggplot(aes(x = estimator, y = estimate,  fill = factor(sample.size, levels = rev(levels(sample.size))))) +\n  scale_fill_brewer(palette = \"Accent\") +\n  ggtitle(\"Misspecification of all models:  \")+\n  geom_boxplot(alpha = 0.9, show.legend = TRUE, position = \"dodge\") +\n  xlab(\"\") + \n  ylab(\"ATE\") + \n  stat_boxplot(geom=\"errorbar\")+\n  geom_hline(yintercept = truth_complex_mis , linetype = \"dashed\", color = \"red\", alpha = 0.8,\n             size = 0.8) +  # Change geom_hline to geom_vline\n  theme(legend.title = element_blank(), legend.position = \"bottom\",\n          legend.box = \"vertical\", legend.text = element_text(size=18),\n          axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),  # Adjust text angle for better visibility\n          axis.text = element_text(size=20, face = \"bold\"),\n          plot.title = element_text(size=24, face = \"bold\"),\n          axis.title.x = element_text(size=20, face = \"bold\"))+\n            coord_cartesian(ylim = c(0.1,0.4))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.arrange(simulation_graph_mis_mistreat_out, simulation_graph_mis_miscens_out, simulation_graph_mis_mistreat_cens, simulation_graph_mis_all, ncol = 2, nrow = 2)\n```\n\n::: {.cell-output-display}\n![Estimation results of the ATE for an observational study with dependent censoring in case of a two or more misspecifications.](Notebook_causal_survival_files/figure-html/fig-mis2-1.png){#fig-mis2 width=2400}\n:::\n:::\n",
    "supporting": [
      "Notebook_causal_survival_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}